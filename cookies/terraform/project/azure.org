%(cookie-prompt "project")
%(cookie-prompt "tenant-domain")
%(cookie-prompt "remote-state-location" "westus2")
%(cookie-prompt "remote-state-resource-group")
%(cookie-prompt "remote-state-container")

* Makefile

#+BEGIN_SRC makefile :tangle (cookie-get-path)
CONTAINER := %(cookie-get "project")
SOURCE_MOUNT := /proj

AZURE_DIR := $(shell pwd)/.azure

DOCKER_RUN := docker run --rm -it \
  --workdir $(SOURCE_MOUNT) \
  --volume $(shell pwd):$(SOURCE_MOUNT) \
  $(CONTAINER)

.PHONY: help
help: ## Show help message
	@grep -hE '^\S+:.*##' $(MAKEFILE_LIST) | sed -e 's/:[[:blank:]]*\(##\)[[:blank:]]*/\1/' | column -s '##' -t

.PHONY: shell
shell: ## Open a shell in the dev environment
	@$(DOCKER_RUN) bash

.PHONY: setup
setup: ## Set up the dev environments
	@mkdir -p $(AZURE_DIR)
	@docker build -t $(CONTAINER) .
#+END_SRC

* Dockerfile
#+BEGIN_SRC dockerfile :tangle (cookie-get-path)
FROM ubuntu:20.04

COPY --from=hashicorp/terraform:0.14.2 /bin/terraform /usr/bin/terraform

RUN apt-get update -yqq && apt-get install -yqq wget make git direnv jq

# tfenv
RUN wget -O /usr/bin/tfenv 'https://github.com/cloudposse/tfenv/releases/download/0.4.0/tfenv_linux_amd64'
RUN echo '47cb95933fc6b4ff6652ae19b8ad5a15303632496820e3c5d3c423ebaf5f737f /usr/bin/tfenv' | sha256sum -c -
RUN chmod +x /usr/bin/tfenv

RUN mkdir -p /root/.config/direnv
ADD docker/direnv.toml /root/.config/direnv/config.toml
ADD docker/direnvrc /root/.direnvrc

ADD docker/bashrc /root/.bashrc

# Azure CLI
ADD azure_cli_install.sh .
RUN bash azure_cli_install.sh

ADD docker/entry.sh /usr/local/bin/entry.sh

CMD /usr/local/bin/entry.sh
#+END_SRC

* azure_cli_install.sh
#+BEGIN_SRC shell :shebang "#!/bin/bash" :tangle (cookie-get-path)
#######################################################################################################################
# This script does three fundamental things:                                                                          #
#   1. Add Microsoft's GPG Key has a trusted source of apt packages.                                                  #
#   2. Add Microsoft's repositories as a source for apt packages.                                                     #
#   3. Installs the Azure CLI from those repositories.                                                                #
# Given the nature of this script, it must be executed with elevated privileges, i.e. with `sudo`.                    #
#                                                                                                                     #
# Remember, with great power comes great responsibility.                                                              #
#                                                                                                                     #
# Do not be in the habit of executing scripts from the internet with root-level access to your machine. Only trust    #
# well-known publishers.                                                                                              #
#######################################################################################################################

set -e

if [[ $# -ge 1 && $1 == "-y" ]]; then
    global_consent=0
else
    global_consent=1
fi

function assert_consent {
    if [[ $2 -eq 0 ]]; then
        return 0
    fi

    echo -n "$1 [Y/n] "
    read consent
    if [[ ! "${consent}" == "y" && ! "${consent}" == "Y" && ! "${consent}" == "" ]]; then
        echo "'${consent}'"
        exit 1
    fi
}

global_consent=0 # Artificially giving global consent after review-feedback. Remove this line to enable interactive mode

setup() {

    assert_consent "Add packages necessary to modify your apt-package sources?" ${global_consent}
    set -v
    export DEBIAN_FRONTEND=noninteractive
    apt-get update
    apt-get install -y apt-transport-https lsb-release gnupg curl
    set +v

    assert_consent "Add Microsoft as a trusted package signer?" ${global_consent}
    set -v
    curl -sL https://packages.microsoft.com/keys/microsoft.asc | gpg --dearmor > /etc/apt/trusted.gpg.d/microsoft.gpg
    set +v

    assert_consent "Add the Azure CLI Repository to your apt sources?" ${global_consent}
    set -v
    # Use env var DIST_CODE for the package dist name if provided
    if [[ -z $DIST_CODE ]]; then
        CLI_REPO=$(lsb_release -cs)
        shopt -s nocasematch
        ERROR_MSG="Unable to find a package for your system. Please check if an existing package in https://packages.microsoft.com/repos/azure-cli/dists/ can be used in your system and install with the dist name: 'curl -sL https://aka.ms/InstallAzureCLIDeb | sudo DIST_CODE=<dist_code_name> bash'"
        if [[ ! $(curl -sL https://packages.microsoft.com/repos/azure-cli/dists/) =~ $CLI_REPO ]]; then
            DIST=$(lsb_release -is)
            if [[ $DIST =~ "Ubuntu" ]]; then
                CLI_REPO="focal"
            elif [[ $DIST =~ "Debian" ]]; then
                CLI_REPO="buster"
            elif [[ $DIST =~ "LinuxMint" ]]; then
                CLI_REPO=$(cat /etc/os-release | grep -Po 'UBUNTU_CODENAME=\K.*') || true
                if [[ -z $CLI_REPO ]]; then
                    echo $ERROR_MSG
                    exit 1
                fi
            else
                echo $ERROR_MSG
                exit 1
            fi
        fi
    else
        CLI_REPO=$DIST_CODE
        if [[ ! $(curl -sL https://packages.microsoft.com/repos/azure-cli/dists/) =~ $CLI_REPO ]]; then
            echo "Unable to find an azure-cli package with DIST_CODE=$CLI_REPO in https://packages.microsoft.com/repos/azure-cli/dists/."
            exit 1
        fi
    fi
    echo "deb [arch=amd64] https://packages.microsoft.com/repos/azure-cli/ ${CLI_REPO} main" \
        > /etc/apt/sources.list.d/azure-cli.list
    apt-get update
    set +v

    assert_consent "Install the Azure CLI?" ${global_consent}
    apt-get install -y azure-cli

}

setup  # ensure the whole file is downloaded before executing
#+END_SRC

* terraform-setup.sh
#+BEGIN_SRC shell :shebang "#!/bin/bash" :tangle (cookie-get-path)

echo "Creating resource group: ${REMOTE_STATE_RESOURCE_GROUP}..."

az group create \
    --name ${REMOTE_STATE_RESOURCE_GROUP} \
    --location ${REMOTE_STATE_LOCATION} \
    --tags "Project=%(cookie-get "project") Environment=%(cookie-get "environment")" \
    --output none

echo "Creating storage account: ${REMOTE_STATE_STORAGE_ACCOUNT}..."

az storage account create \
   --name ${REMOTE_STATE_STORAGE_ACCOUNT} \
   --resource-group ${REMOTE_STATE_RESOURCE_GROUP} \
   --access-tier Hot \
   --allow-blob-public-access false \
   --encryption-services blob \
   --kind StorageV2 \
   --tags "Project=%(cookie-get "project") Environment=%(cookie-get "environment")" \
   --output none

ACCOUNT_KEY=$(az storage account keys list --resource-group ${REMOTE_STATE_RESOURCE_GROUP} --account-name ${REMOTE_STATE_STORAGE_ACCOUNT} --query '[0].value' -o tsv)

echo "Creating storage container: ${REMOTE_STATE_STORAGE_ACCOUNT}..."
az storage container create \
    --name "${REMOTE_STATE_STORAGE_ACCOUNT}"
    --account-name ${REMOTE_STATE_STORAGE_ACCOUNT} \
    --account-key ${ACCOUNT_KEY} \
    --resource-group ${REMOTE_STATE_RESOURCE_GROUP} \
    --public-access off \
    --output none
#+END_SRC

* CHANGELOG.org                                                      :export:
** Changelog

 All notable changes to this project will be documented in this file.

 The format is based on [[https://keepachangelog.com/en/1.0.0/][Keep a Changelog]], and this project adheres to [[https://semver.org/spec/v2.0.0.html][Semantic Versioning]].

*** [Unreleased]

**** Added

**** Changed

**** Fixed

**** Removed
* README.org                                                         :export:
** %(cookie-get "project")

*** Installation

*** Usage

* .gitignore
#+BEGIN_SRC gitignore :tangle (cookie-get-path)
# Files generated by terragrunt
.terraform.lock.hcl
backend.tf
provider.tf

# Azure files
.azure
#+END_SRC
* .envrc
This uses ~direnv~ and ~tfenv~ to manage terraform environment variables

#+begin_src shell :tangle (cookie-get-path)
add_tag Project harbor-infra
export REMOTE_STATE_CONTAINER="%(cookie-get "remote-state-container")"
export REMOTE_STATE_RESOURCE_GROUP="%(cookie-get "remote-state_resource_group")"
export REMOTE_STATE_STORAGE_ACCOUNT="%(cookie-get "remote-state-storage-account")"
export REMOTE_STATE_LOCATION="%(cookie-get "remote-state-location")"
export AZ_TENANT="%(cookie-get "remote-state-storage-account")"
export TF_CLI_INIT_BACKEND_CONFIG_CONTAINER_NAME="${REMOTE_STATE_CONTAINER}"
export TF_CLI_INIT_BACKEND_CONFIG_RESOURCE_GROUP_NAME="${REMOTE_STATE_RESOURCE_GROUP}"
export TF_CLI_INIT_BACKEND_CONFIG_STORAGE_ACCOUNT_NAME="${REMOTE_STATE_STORAGE_ACCOUNT}"
#+end_src
* docker
** bashrc
#+begin_src shell :tangle (cookie-get-path)
az_login() {
    az login --tenant ${AZ_TENANT}
    export ARM_ACCESS_KEY=$(az storage account keys list \
        --resource-group  "HarborTerraformState" \
        --account-name "harborterraformstate" \
        --query '[0].value' -o tsv)
}


eval "$(direnv hook bash)"
#+end_src
** direnvrc
#+begin_src shell :tangle (cookie-get-path)
add_tag() {
    export TF_VAR_tags=$(echo "${TF_VAR_tags:-{\}}" | jq -c ".$1 = \"$2\"")
}

prepend_state() {
    export TF_CLI_INIT_BACKEND_CONFIG_KEY="${1}.${TF_CLI_INIT_BACKEND_CONFIG_KEY}"
}
#+end_src
** direnv.toml
#+begin_src toml :tangle (cookie-get-path)
[whitelist]
prefix = [ "/proj" ]
#+end_src

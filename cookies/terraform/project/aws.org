%(cookie-prompt "project")
%(cookie-prompt "tenant-domain")
%(cookie-prompt "remote-state-location" "westus2")
%(cookie-prompt "remote-state-resource-group")
%(cookie-prompt "remote-state-container")

* Makefile

#+begin_src makefile :tangle (cookie-get-path)
CONTAINER := %(cookie-get "project")
SOURCE_MOUNT := /proj

MODULES_DIR := modules

AWS_CONFIGS := $(HOME)/.aws
AWS_PROFILE := %(cookie-get "project")
AWS_REGION := us-west-2

SAML2AWS_PROVIDER := GoogleApps
SAML2AWS_URL := "https://accounts.google.com/o/saml2/initsso?idpid=C03ro8foc&spid=175909936406"

DOCKER_RUN := docker run --rm -it \
  --env "AWS_PROFILE=$(AWS_PROFILE)" \
  --env "AWS_DEFAULT_REGION=$(AWS_REGION)" \
  --workdir $(SOURCE_MOUNT) \
  --volume $(shell pwd):$(SOURCE_MOUNT) \
	--volume $(AWS_CONFIGS):/root/.aws \
  $(CONTAINER)

.PHONY: tf-setup
tf-setup:
	@AWS_DEFAUL_REGION=$(AWS_REGION) \
		$(DOCKER_RUN) aws cloudformation deploy \
		--stack-name $(CONTAINER)-state \
		--template-file prereq_cloudformation.yml \
		--parameter-overrides "BucketName=$(CONTAINER)-state,TableName=$(CONTAINER)-state-locks,Project=$(CONTAINER)" || true

.PHONY: setup
setup: ## test
	@docker build \
		--tag $(CONTAINER) \
		--build-arg SAML2AWS_PROVIDER=$(SAML2AWS_PROVIDER) \
		--build-arg SAML2AWS_URL=$(SAML2AWS_URL) \
		--build-arg AWS_PROFILE=$(AWS_PROFILE) \
		--build-arg EMAIL=$(EMAIL) \
		.

.PHONY: shell
shell: ## test
	@$(DOCKER_RUN) bash

.PHONY: _login
_login:
	@saml2aws login

.PHONY: login
login: ## Generate temporary AWS credentials
	@$(DOCKER_RUN) make _login
#+end_src

* Dockerfile
#+begin_src dockerfile :tangle (cookie-get-path)
FROM ubuntu:20.04

COPY --from=hashicorp/terraform:0.14.2 /bin/terraform /usr/bin/terraform
COPY --from=hashicorp/packer:light /bin/packer /usr/bin/packer
RUN apt-get update -yqq && apt-get install -yqq wget make git jq zip direnv

# direnv
ADD docker/direnv.toml /root/.config/direnv/config.toml
ADD docker/direnvrc /root/.direnvrc

# tfenv
RUN wget -O /usr/bin/tfenv 'https://github.com/cloudposse/tfenv/releases/download/0.4.0/tfenv_linux_amd64'
RUN echo '47cb95933fc6b4ff6652ae19b8ad5a15303632496820e3c5d3c423ebaf5f737f /usr/bin/tfenv' | sha256sum -c -
RUN chmod +x /usr/bin/tfenv

# SAML2AWS
ENV SAML2AWS_VERSION=2.26.1
ENV SAML2AWS_SHA512='15f1ad5dda74865639a64790630ac604cbce446c2d331b5ae8f65a0435101f1eab24ad96e736aae5c9e074ad3252947f80dba267ec792649c2c1cfab5326d2fc'

RUN wget -O /tmp/saml2aws.tar.gz "https://github.com/Versent/saml2aws/releases/download/v${SAML2AWS_VERSION}/saml2aws_${SAML2AWS_VERSION}_linux_amd64.tar.gz"

RUN echo "${SAML2AWS_SHA512}  /tmp/saml2aws.tar.gz" | sha512sum -c -

RUN tar -xzvf /tmp/saml2aws.tar.gz -C /usr/bin
RUN chmod +x /usr/bin/saml2aws

ARG SAML2AWS_PROVIDER
ARG SAML2AWS_URL
ARG AWS_PROFILE
ARG EMAIL

RUN saml2aws configure \
  --idp-provider ${SAML2AWS_PROVIDER} \
  --url  ${SAML2AWS_URL}\
  --profile ${AWS_PROFILE} \
  --session-duration 36000 \
  --mfa Auto \
  --skip-prompt


ADD docker/bashrc /root/.bashrc
#+end_src

* README.org                                                         :export:
** %(cookie-get "project")

This repository stores all of the infrastructure code for %(cookie-get "project")

*** Usage
1. Build the dev environment container - ~make setup~
**** Requirements
- Docker
- Make

***** Credentials
Terraform will use the default AWS profile on your machine, or whichever profile the =AWS_PROFILE= environment variable points to

Use ~make login~ to generate an AWS access key that will last 10 hours.
**** State
Terraform keeps track of it's resources in =.tfstate= files. These files are **very** important. If they're lost of corrupted, terraform forgets about all of our infrastructure.

In order to keep the state safe and to use it between developers, the state is kept in AWS. Our state is being stored in an S3, with a DynamoDB table to keep track of state locks. The locks prevent more than one person from trying to modify the state at once.

Usage of state will be transparent to developers, terraform will take care of it for you.

The S3 bucket that stores the remote state and matches the directory layout of the code
**** Tagging
Tagging resources is an important part of cloud infrastructure. Tags give us a way to keep track of which resources are part of which parts of our infrastructure. Among other things, this gives us very granular tracking of our costs

**At least** these tags should be applied to all resources that support tags:

- Project :: This should always be =%(cookie-get "project")=
- Environment :: The name of the environment the resource is a part of (shared, staging, prod, etc)
- Puprose :: The name of the high-level component the resource is a part of
**** Resources
- [[https://www.youtube.com/watch?v=LVgP63BkhKQ][How to Build Reusable, Composable, Battle tested Terraform Modules - YouTube]]
- [[https://www.youtube.com/watch?v=RTEgE2lcyk4][5 Lessons Learned From Writing Over 300,000 Lines of Infrastructure Code - Yo...]]
- [[https://www.youtube.com/watch?v=RSv9H59AsoI][Launch AWS Faster using Automated Landing Zones - AWS Online Tech Talks - You...]]
- [[https://gruntwork.io/devops-checklist/][Production Readiness Checklist]]

* CHANGELOG.org                                                      :export:
** Changelog

 All notable changes to this project will be documented in this file.

 The format is based on [[https://keepachangelog.com/en/1.0.0/][Keep a Changelog]], and this project adheres to [[https://semver.org/spec/v2.0.0.html][Semantic Versioning]].

*** [Unreleased]

**** Added

**** Changed

**** Fixed

**** Removed
* .gitignore
#+BEGIN_SRC gitignore :tangle (cookie-get-path)
# Created by https://www.toptal.com/developers/gitignore/api/terraform
# Edit at https://www.toptal.com/developers/gitignore?templates=terraform

### Terraform ###
# Local .terraform directories
**/.terraform/*

# .tfstate files
*.tfstate
*.tfstate.*

# Crash log files
crash.log

# Ignore any .tfvars files that are generated automatically for each Terraform run. Most
# .tfvars files are managed as part of configuration and so should be included in
# version control.
#
# example.tfvars

# Ignore override files as they are usually used to override resources locally and so
# are not checked in
override.tf
override.tf.json
*_override.tf
*_override.tf.json

# Include override files you do wish to add to version control using negated pattern
# !example_override.tf

# Include tfplan files to ignore the plan output of command: terraform plan -out=tfplan
# example: *tfplan*

# End of https://www.toptal.com/developers/gitignore/api/terraform
#+END_SRC
* .envrc
This uses ~direnv~ and ~tfenv~ to manage terraform environment variables

#+begin_src shell :tangle (cookie-get-path)
add_tag Project harbor-infra
export REMOTE_STATE_CONTAINER="%(cookie-get "remote-state-container")"
export REMOTE_STATE_RESOURCE_GROUP="%(cookie-get "remote-state_resource_group")"
export REMOTE_STATE_STORAGE_ACCOUNT="%(cookie-get "remote-state-storage-account")"
export REMOTE_STATE_LOCATION="%(cookie-get "remote-state-location")"
export TF_CLI_INIT_BACKEND_CONFIG_CONTAINER_NAME="${REMOTE_STATE_CONTAINER}"
export TF_CLI_INIT_BACKEND_CONFIG_RESOURCE_GROUP_NAME="${REMOTE_STATE_RESOURCE_GROUP}"
export TF_CLI_INIT_BACKEND_CONFIG_STORAGE_ACCOUNT_NAME="${REMOTE_STATE_STORAGE_ACCOUNT}"
#+end_src
* docker
** bashrc
#+begin_src shell :tangle (cookie-get-path)
eval "$(direnv hook bash)"
#+end_src
** direnvrc
#+begin_src shell :tangle (cookie-get-path)
add_tag() {
    export TF_VAR_tags=$(echo "${TF_VAR_tags:-{\}}" | jq -c ".$1 = \"$2\"")
}

prepend_state() {
    export TF_CLI_INIT_BACKEND_CONFIG_KEY="${1}.${TF_CLI_INIT_BACKEND_CONFIG_KEY}"
}
#+end_src
** direnv.toml
#+begin_src toml :tangle (cookie-get-path)
[whitelist]
prefix = [ "/proj" ]
#+end_src
* prereq-cloudformation.yml
#+begin_src yaml :tangle (cookie-get-path)
AWSTemplateFormatVersion: "2010-09-09"
Parameters:
  BucketName:
    Type: 'String'
  TableName:
    Type: 'String'
  Project:
    Type: 'String'
Resources:
  stateBucket:
    Type: 'AWS::S3::Bucket'
    Properties:
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: 'AES256'
      BucketName:
        Ref: 'BucketName'
      Tags:
        - Key: 'Project'
          Value:
            Ref: 'Project'
      VersioningConfiguration:
        Status: 'Enabled'
  stateLockDynamo:
    Type: 'AWS::DynamoDB::Table'
    Properties:
      AttributeDefinitions:
        - AttributeName: 'LockID'
          AttributeType: 'S'
      BillingMode: 'PAY_PER_REQUEST'
      KeySchema:
        - AttributeName: 'LockID'
          KeyType: 'HASH'
      TableName:
        Ref: 'TableName'
      Tags:
        - Key: 'Project'
          Value:
            Ref: 'Project'
Outputs:
  stateBucket:
    Value:
      Ref: BucketName
  lockTable:
    Value:
      Ref: stateLockDynamo
#+end_src

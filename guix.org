* Guix

** Emacs Configs

#+begin_src elisp :noweb-ref configs
(defvar guix-buffer-name "*guix*")

(set-popup-rule! (regexp-quote guix-buffer-name) :side 'bottom :size 0.3 :select nil :quit 'current)

(map! :leader
      :n "a g g" #'guix
      :desc "Guix GC"                :n "a g c" (cmd! (async-shell-command "guix gc" guix-buffer-name))
      :desc "Guix Pull"                :n "a g p" (cmd! (async-shell-command "guix pull" guix-buffer-name))
      :desc "Guix Upgrade"             :n "a g u" (cmd! (async-shell-command "guix upgrade" guix-buffer-name))
      :desc "Guix Pull+Upgrade"        :n "a g U" (cmd! (async-shell-command "guix pull && guix upgrade" guix-buffer-name))
      :desc "Guix System Reconfigure"  :n "a g S" (cmd! (async-shell-command "sudo guix system reconfigure /etc/config.scm" guix-buffer-name))
      :desc "Find package definition"  :n "a g d" #'guix-find-package-definition
      )

(map! :map +vertico/embark-doom-package-map
      :desc "Guix install" "g" (lambda (package) (async-shell-command (format "guix install %s" package) guix-buffer-name)))
#+end_src

*** Doom Packages
#+begin_src elisp :noweb-ref packages
(package! guix)
#+end_src
** Channels
I add the [[https://gitlab.com/nonguix/nonguix][nonguix]] channel so that I have access to firefox and wifi drivers when I need them

My dotfiles repository is also it's own Guix channel, wich the package definitions living in =ccc.scm=

#+begin_src scheme :tangle ~/.config/guix/channels.scm
(cons* (channel
        (name 'nonguix)
        (url "https://gitlab.com/nonguix/nonguix")
        ;; Enable signature verification:
        (introduction
         (make-channel-introduction
          "897c1a470da759236cc11798f4e0a5f7d4d59fbc"
          (openpgp-fingerprint
           "2A39 3FFF 68F4 EF7A 3D29  12AF 6F51 20A0 22FB B2D5"))))
       (channel
                (name 'ccc)
                (url (string-append "file://" (getenv "HOME") "/dotfiles")))
%default-channels)

#+end_src
** Shells

I need my =.profile= to include the path to my guix profile so that Eshell over TRAMP will pick up my guix binaries. The =.profile= is source when you include ='tramp-own-remote-path= in =tramp-remote-path=

#+begin_src sh :tangle "~/.profile"
#!/usr/bin/env sh

export PATH=${HOME}/.guix-profile/bin:$PATH
#+end_src
** Snippets
:PROPERTIES:
:snippet_mode: scheme-mode
:END:

*** guix-system
#+begin_src snippet :tangle (get-snippet-path)
(operating-system
  (host-name "$1")
  (timezone "United States/Pacific")
  (locale "en_US.utf8")
  (bootloader (bootloader-configuration
                (bootloader grub-efi-bootloader)
                (targets '("/boot/efi"))))
  (file-systems (cons (file-system
                        (device (file-system-label "my-root"))
                        (mount-point "/")
                        (type "ext4"))
                      %base-file-systems))

  ;; This is where user accounts are specified.  The "root"
  ;; account is implicit, and is initially created with the
  ;; empty password.
  (users (cons (user-account
                (name "alice")
                (comment "Bob's sister")
                (group "users")

                ;; Adding the account to the "wheel" group
                ;; makes it a sudoer.  Adding it to "audio"
                ;; and "video" allows the user to play sound
                ;; and access the webcam.
                (supplementary-groups '("wheel"
                                        "audio" "video")))
               %base-user-accounts))

  ;; Globally-installed packages.
  (packages (cons screen %base-packages))

  ;; Add services to the baseline: a DHCP client and
  ;; an SSH server.
  (services (append (list (service dhcp-client-service-type)
                          (service openssh-service-type
                                   (openssh-configuration
                                    (openssh openssh-sans-x)
                                    (port-number 2222))))
                    %base-services)))
#+end_src

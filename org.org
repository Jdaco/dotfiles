* Org

I use [[https://orgmode.org/][Org mode]] for:
- Notes
- Agenda
- Project tmeplates
- Literate Programming (like this repo!)
- Flash Cards
- Keeping track of books that I read
- Storing my contacts

- Note :: The configurations for someof these are stored in =brain.org=

#+begin_src elisp :noweb-ref configs
(after! (org-agenda)

  (defun goto-or-create-heading (heading &optional level)
    (find-file (ccc/find-areas))
    (let ((existing (org-ql-select (current-buffer)
                      `(and (level ,(or level 1)) (heading ,heading))
                      :action #'point)))
      (if existing
          (goto-char (car existing))
        (progn
          (end-of-buffer)
          (insert (format "\n* %s)" heading))))))


  (map! :map org-mode-map
        "C-<return>" #'evil-org-org-insert-heading-respect-contents-below
        "M-l" #'org-demote-subtree
        "M-h" #'org-promote-subtree
        "M-k" #'org-move-subtree-up
        "M-j" #'org-move-subtree-down
        "C-)" #'org-cycle-list-bullet
        )

  (map! :map org-mode-map
        :localleader
        "v E" #'org-edit-src-code
        )

(map! :map calendar-mode-map
      "M-h" #'calendar-backward-day
      "M-l" #'calendar-forward-day
      "M-j" #'calendar-backward-week
      "M-k" #'calendar-forward-day
      )

(add-to-list '+ligatures-in-modes 'org-mode)
(map! :leader
      "A" #'org-archive-to-archive-sibling)

(defun org-id-open-other-window ()
  (interactive)
  (let* ((id (org-id-get))
         (location (car (org-id-find id))))
    (find-file-other-window location)))

(map! :map embark-org-link-map
      "o" #'org-id-open-other-window
      )

;; Strike through org-done tasks to intensify the sense of achievement
(set-face-attribute 'org-headline-done nil :strike-through t)

(setq org-id-link-to-org-use-id t
      org-hide-emphasis-markers t
      org-outline-path-complete-in-steps nil
      org-refile-use-outline-path t
      org-attach-store-link-p t
      org-modules '(org-crypt)
      org-export-with-tags nil
      org-export-with-section-numbers nil
      org-refile-targets '((org-agenda-files :maxlevel . 6))
      org-tags-exclude-from-inheritance '(storage book certification assistant recipe goal)
      )
)

(add-hook! org-mode
  (progn
    (company-mode 0)
    (doom-disable-line-numbers-h)))
#+end_src

#+begin_src elisp :noweb-ref packages
(package! org-picklink)
(package! org-ref)
#+end_src


** Sidebar
#+begin_src elisp :noweb-ref configs
(add-hook 'org-sidebar-window-after-display-hook (lambda () (evil-motion-state) (org-cycle-content 2)))

(map!
   (:leader
    :prefix ("o o" . "Org")
    :prefix ("S" . "org-sidebar")
     "s" #'org-sidebar-toggle
     "t" #'org-sidebar-tree-toggle
     ))
#+end_src

#+begin_src elisp :noweb-ref packages
(package! org-sidebar)
#+end_src



** Snippets
:PROPERTIES:
:snippet_mode: org-mode
:END:

*** resources-drawer
#+BEGIN_SRC snippet :tangle (get-snippet-path)
# name: resources-drawer
# key: res
# --
:RESOURCES:
  $0
:END:
#+END_SRC
*** videos-drawer
#+BEGIN_SRC snippet :tangle (get-snippet-path)
# name: videos-drawer
# key: vid
# --
:VIDEOS:
  $0
:END:
#+END_SRC

*** source-block
#+BEGIN_SRC snippet :tangle (get-snippet-path)
# name: source-block
# key: src
# --
#+begin_src $1
$0
`(format "#+end_src")`
#+end_src
*** center
#+BEGIN_SRC snippet :tangle (get-snippet-path)
# name: center
# key: center
# --
#+begin_src $1
#+begin_center
$0
#+end_center
#+end_src
*** quote
#+BEGIN_SRC snippet :tangle (get-snippet-path)
# name: quote-block
# key: quote
# --
#+begin_quote
$0
`(format "#+end_quote")`
#+end_src

*** dblock
#+BEGIN_SRC snippet :tangle (get-snippet-path)
# name: dblock
# key: db
# --
#+BEGIN: $1
$0
`(format "#+END:")`
#+end_src
*** agenda-block
#+BEGIN_SRC snippet :tangle (get-snippet-path)
# name: agenda-block
# key: agenda
# --
#+BEGIN: org-ql :query "todo:TODO,PROGRESS scheduled:from=-7,to=today" :file org-agenda-files :sort date :columns (heading todo category)
`(format "#+END:")`
$0
#+end_src
** Capture
:PROPERTIES:
:ID:       5fe33daf-9f01-4348-91fd-e438e4381e50
:END:

Org-mode comes with a [[https://orgmode.org/manual/Capture.html][capture]] system for quickly storing information. I use capture for two things:
1. Quickly filing thoughts, links and information into the correct file or to review later.
   - I've found that [[https://github.com/progfolio/doct][doct]] provides a much cleaner way to specify your capture templates
2. Initializing project templates.
   - This is possible thanks to org-capture, [[https://orgmode.org/manual/Extracting-Source-Code.html][org-babel-tangle]] and some custom ELisp code
   - I used to use [[https://cookiecutter.readthedocs.io/en/1.7.2/][cookiecutter]] for this, but org-mode gives me much more flexibility. [[https://yeoman.io/][Yeoman]] is another popular option

#+begin_src elisp :noweb-ref configs :results none
(defvar cookie-path (f-join dotfiles-directory "cookies")
"Path to cookie dierectory")

(defun cookie-get-path ()
"Generate the path to tangle src block to
Intended to be used in the form of `:tangle (cookie-get-path) on files that are meant
to be tangled'"
(apply 'f-join (cons (file-name-directory (buffer-file-name (marker-buffer (org-capture-get :cookie-mark))))
                        (cdr (org-get-outline-path t)))))

(defun cookie-root ()
(f-dirname
    (buffer-file-name (marker-buffer (org-capture-get :cookie-mark)))))

(defun cookie-git ()
(when (doct-get :git)
    (let ((root (cookie-root)))
    (save-window-excursion
        (magit-init root)
        (magit-stage-file root)))))

(defun cookie-visit-file ()
(let ((path (expand-file-name (doct-get :visit-file) (cookie-root))))
    (find-file path)
    (magit-status)))

(defun cookie-gitignore ()
"Generate a gitignore from https://gitignore.io"
(when (doct-get :gitignore)
    (with-current-buffer (find-file-noselect (expand-file-name ".gitignore" (cookie-root)))
    (end-of-buffer)
    (insert "\n.project.org\n")
    (dolist (name (doct-get :gitignore))
            (gitignore-templates-insert name))
    (save-buffer)))
)

(defun cookie-new-project (&optional directory)
"Find the staring place for the capture process

Info is stored in a .project.org file

Prompts the user for a directory to use

Looks for `.project.org' in the projectile root, not the selected directory

If the project root isn't the selected directory, make sub headings to match the
path relative to the project root
"
(let* ((project-dir (read-directory-name "Project Directory: "))
        (root (projectile-project-root project-dir))
        (relative-to-root (f-relative  project-dir (or root project-dir))))
    (find-file (concat (or root project-dir) ".project.org"))
    (beginning-of-buffer)
    (when (eq 0 (buffer-size))
    (org-insert-heading)
    (insert (f-base (f-dirname (buffer-file-name))))
    (org-entry-put nil "VISIBILITY" "contents")
    (org-entry-put nil "header-args" ":noweb yes :mkdirp yes"))
    (unless (string= "./" relative-to-root)
    (let ((path (list (org-get-heading t t))))
        (dolist (segment (f-split relative-to-root))
        (setq path (append path (list segment)))
        (let ((found (org-ql-select (current-buffer) (cons 'outline-path-segment path) :action #'point)))
            (if found
                (goto-char (car found))
            (progn
                (org-insert-subheading '(4))
                (insert segment)))))
        ))
    (org-capture-put :cookie-mark (point-marker))))

(defun process-cookie ()
"Generate the project files from the cookie"
(org-babel-tangle)
(org-map-entries
    (lambda ()
    (progn
        (let* ((path (cookie-get-path))
            (dir (file-name-directory path))
            (contents (org-get-entry))
            (level (org-current-level)))
        (unless (file-directory-p dir) (mkdir dir t))
        (with-current-buffer (find-file-noselect path)
            (insert contents)
            (save-buffer)
            (org-map-entries (lambda () (--dotimes level (org-promote))))
            (save-buffer)))))
    "TAGS={export}" nil))

(defun cookie-get (prop)
"Get PROP from the projects `.project.org' file

Intended to be used as `%(cookie-get PROP)' from the cookie templates"
(or (org-entry-get (org-capture-get :cookie-mark) prop t) ""))

(defun cookie-prompt (var &optional initial)
"Prompt the user for a value and save it in `.project.org'

Returns an empty string
Intended to be used as `%(cookie-prompt PROP INITIAL)' from the cookie templates"
(org-entry-put (org-capture-get :cookie-mark) var (read-string (format "%s: " var) initial))
"")

(defun cookie-choice (var &rest choices)
"Prompt the user to choose a value and save it in `.project.org'

Returns an empty string
Intended to be used as `%(cookie-choice PROP CHOICE CHOICE ...)' from the cookie
templates"
(org-entry-put (org-capture-get :cookie-mark) var (completing-read (format "%s: " var) choices))
"")

(defun cookie-copy-assets ()
(when (doct-get :assets)
    (let ((assets (f-join cookie-path (doct-get :assets) "*")))
    (shell-command (format "cp %s %s" assets (cookie-root))))))

(after! org
  (require 'bookmark)
  (bookmark-maybe-load-default-file)
  (setq org-capture-templates
    (doct `(("Inbox" :keys "i" :file ,(bookmark-get-filename "inbox") :template "* %?")
            ("Recipe" :keys "r" :function (lambda () (goto-or-create-heading "Recipe")) :template "* %?     :recipe:")
            ("New Job" :keys "j"
                :file ,(f-join org-directory "areas/career.org")
                :function (lambda ()  org-id-goto "76f493bc-fe55-4351-81ff-cc1b9f188db0")
                :template-file ,(f-join dotfiles-directory "templates" "org" "new-job.org"))
            ("Cookies" :keys "c"
            :function cookie-new-project
                :immediate-finish t
                :kill-buffer nil
                :prepare-finalize (lambda () (cookie-copy-assets) (process-cookie))
                :after-finalize (lambda () (cookie-gitignore) (cookie-git) (cookie-visit-file))
                :git t
                :visit-file "Makefile"
                :children (
                        ("Mkosi" :keys "m" :template-file ,(f-join cookie-path "mkosi.org"))
                        ("Python" :keys "p" :template-file ,(f-join cookie-path "python.org") :gitignore ("python" "emacs"))
                        ("Terraform" :keys "t"
                            :children (("Environment"
                                        :keys "e"
                                        :template-file ,(f-join cookie-path "terraform/environment.org" )
                                        :git nil)
                                    ("Project" :keys "p"
                                        :gitignore ("terraform" "terragrunt")
                                        :children (("Azure"
                                                    :keys "a"
                                                    :template-file ,(f-join cookie-path "terraform/project/azure.org"))
                                                ("AWS"
                                                    :keys "w"
                                                    :template-file ,(f-join cookie-path "terraform/project/aws.org"))))
                                    ("Module"
                                        :keys "m"
                                        :template-file ,(f-join cookie-path "terraform/module.org")
                                        :git nil)
                                    ))))
            <<capture-templates>>

            )))
  )

#+end_src

#+begin_src elisp :noweb-ref packages
(package! doct)
(package! gitignore-templates)
#+end_src
** Agenda

#+begin_src elisp :noweb-ref configs
(defun ccc/org-remove-priority (state)
  (let ((position (plist-get state :position))
      (state-to (plist-get state :to))
      (type (plist-get state :type)))
  (when (and (string= type "todo-state-change")
             (member state-to org-done-keywords))
    (org-entry-put position "PRIORITY" nil))
  ))

(use-package! org-super-agenda
  :after org-agenda
  :init
  (setq org-super-agenda-mode t
        org-agenda-span 1
        holiday-bahai-holidays nil
        holiday-hebrew-holidays nil
        holiday-islamic-holidays nil
        org-log-into-drawer t
        org-highest-priority 65
        org-lowest-priority 68
        org-default-priority 68
        org-log-done "time"
        org-log-done-with-time t
        org-agenda-start-day nil
        org-agenda-start-on-weekday nil
        org-agenda-hide-tags-regexp ".*"
      org-agenda-prefix-format '((agenda . " %i  %?-12t ")
                                 (todo . " %i %-12:c")
                                 (tags . " %i %-12:c")
                                 (search . " %i %-12:c"))

        org-agenda-time-grid '((daily) () "" "")
        org-agenda-custom-commands
        '(("w" "Upcoming week" agenda "" ((org-agenda-span 7) (org-agenda-tag-filter-preset '("-meal" "-maintenance" "-assistant" "-training"))))
          ("g" "Grouped" todo "" ((org-agenda-tag-filter-preset '("-maintenance")) (org-super-agenda-groups '((:todo "PROGRESS" :name "In Progress") (:auto-group))))))

        ; The evil keys aren't working on super-agenda headings
        ; https://github.com/alphapapa/org-super-agenda/issues/50
        org-super-agenda-header-map (make-sparse-keymap)
        org-todo-keyword-faces '(("SCHEDULED" . (:foreground "YELLOW" :weight bold)))
        org-todo-keywords '((sequence "TODO(t)" "PROGRESS(p!)" "WAITING(w!)" "|" "DONE(d!)" "CANCELLED(c@/!)")
                            (sequence "SCHEDULED(s)" "|" "DONE(d!)" "CANCELLED(c@/!)")
                            (sequence "WISH(W)" "SHIPPING(S)" "|" "OWNED(o!)" "TRASHED(T!)" "RETURNED(r!)"))
        org-super-agenda-groups '((:name " Today "
                                   :time-grid)
                                  (:name " Past Due "
                                   :deadline (past))
                                  (:todo "WAITING")
                                  (:name " Shipping "
                                   :todo "SHIPPING")
                                  (:tag "assistant")
                                  (:name " Maintenance "
                                   :tag "maintenance")
                                  (:name "Deadline"
                                   :deadline (future))
                                  (:auto-category))

        org-clock-clocktable-default-properties '(:scope agenda-with-archives
                                                  :fileskip0 t
                                                  :block today
                                                  :compact t
                                                  :link t)
        )
  (add-hook 'org-trigger-hook 'ccc/org-remove-priority)
  :config
  (org-super-agenda-mode)
  )

(after! org-super-agenda
  (org-super-agenda--def-auto-group category "their org-category property"
    :key-form (org-super-agenda--when-with-marker-buffer (org-super-agenda--get-marker item)
                (org-get-category))
    :header-form (format "%s %s " (car (org-agenda-get-category-icon key)) key)))

(defun ccc/num-days (&optional time)
  "Return number of days since epoch
If time is specified, return number days that time is since epoch"
  (let ((time-zone-offset (car (current-time-zone))))
    (truncate (/ (+ time-zone-offset (float-time time)) 3600 24))))

(defun ccc/adjust-day (&optional time)
  (let* ((deadline? nil)
       (scheduled-days (ccc/num-days (org-get-scheduled-time (point))))
       (time-diff (- (ccc/num-days time) scheduled-days)))
    (save-excursion
	   (org-back-to-heading t)
	   (let ((regexp (if deadline? org-deadline-time-regexp
			   org-scheduled-time-regexp)))
	     (if (not (re-search-forward regexp (line-end-position 2) t))
	         (user-error (if deadline? "No deadline information to update"
			       "No scheduled information to update"))
	       (let* ((begin (match-beginning 1)))
	         (goto-char begin)
           (org-timestamp-up-day time-diff))))
           (org-entry-get (point) "SCHEDULED"))))

(defun ccc/org-agenda-adjust-day (&optional date)
  (interactive (list (when current-prefix-arg (time-convert (org-read-date nil t) 'integer))))
  (if (not org-agenda-bulk-marked-entries)
      (save-excursion (org-agenda-bulk-mark)))
    (dolist (marker org-agenda-bulk-marked-entries)
    (let ((buffer (marker-buffer marker))
 	        (pos (marker-position marker))
            ts)
      (org-with-remote-undo buffer
        (with-current-buffer buffer
 	        (widen)
 	        (goto-char pos)
          (setq ts (ccc/adjust-day date)))
        (goto-char (text-property-any (point-min) (point-max) 'org-hd-marker marker))
        (org-agenda-show-new-time (org-get-at-bol 'org-marker) ts " S"))))

  (unless org-agenda-persistent-marks (org-agenda-bulk-unmark-all)))

;; (evil-set-initial-state 'org-agenda-mode 'emacs)
(map! :map org-agenda-mode-map
      :m "j" #'org-agenda-next-item
      :m "k" #'org-agenda-previous-item
      :m "!" #'org-agenda-toggle-deadlines
      :m "C-*" #'org-agenda-toggle-time-grid
      :m "W" #'org-agenda-week-view
      :m "D" #'org-agenda-day-view
      :m "C-=" #'text-scale-increase
      :m "C--" #'text-scale-decrease
      :m "C-:" #'ccc/org-agenda-adjust-day
      :m ">" (cmd! (ccc/org-agenda-adjust-day (+ (float-time) 86400)))
      :map evil-org-agenda-mode-map
      :nvm "g s" nil
      :m "g s s" #'avy-goto-char-2
      )
#+end_src

#+begin_src elisp :noweb-ref packages
(package! org-super-agenda)
#+end_src
*** Timeblock

I use the [[https://github.com/ichernyshovvv/org-timeblock][org-timeblock]] package to visualize the duration of my tasks

#+begin_src elisp :noweb-ref packages
(package! org-timeblock :recipe (:host github :repo "ichernyshovvv/org-timeblock"))
#+end_src

#+begin_src elisp :noweb-ref configs
(evil-set-initial-state 'org-timeblock-mode 'emacs)
(evil-set-initial-state 'org-timeblock-list-mode 'normal)
(map! :leader
      "n T" #'org-timeblock)
(map! :map org-agenda-mode-map
      "C-t" #'org-timeblock)
(map! :map org-timeblock-mode-map
      "j" #'org-timeblock-forward-block
      "k" #'org-timeblock-backward-block
      "h" #'org-timeblock-backward-column
      "l" #'org-timeblock-forward-column
      )
(map! :map org-timeblock-mode-map
      "j" #'org-timeblock-forward-block
      "k" #'org-timeblock-backward-block
      "h" #'org-timeblock-backward-column
      "l" #'org-timeblock-forward-column
      "v" #'org-timeblock-switch-view
      "t" #'org-timeblock-toggle-timeblock-list
      "C-j" #'org-timeblock-day-later
      "C-k" #'org-timeblock-day-earlier
      "J" #'org-timeblock-jump-to-day
      )

(setq org-timeblock-fast-todo-commands '(("TODO" . "1")
                                         ("DONE" . "D")
                                         ("CANCELLED" . "c")
                                         ("PROGRESS" . "p")))
#+end_src

I overwrite this function to filter out archived headings

#+begin_src elisp :noweb-ref configs
(after! org-timeblock
(defadvice! ccc/org-timeblock-get-entries (fun &rest args)
  :around #'org-timeblock-get-entries
  (let ((output (apply fun args)))
    (seq-filter
     (lambda (entry)
       (not (seq-contains (get-text-property 0 'tags entry) "ARCHIVE")))
     output))
  )
)

#+end_src

** Babel
#+begin_src elisp :noweb-ref configs
; Allow links to info pages
(require 'ol-info)

;; Allows src blocks to be executed asynchronously
(require 'ob-async)
#+end_src

#+begin_src elisp :noweb-ref packages
(package! ob-async)
#+end_src
** Presentations

[[https://github.com/takaxp/org-tree-slide][org-tree-slide]] is my preferred way of giving presentations within Emacs. It's automatically installed in with the =org +present= Doom module

#+begin_src elisp :noweb-ref packages
(package! org-tree-slide)
#+end_src


#+begin_src elisp :noweb-ref configs
(map! :leader
      "t p" #'org-tree-slide-mode
      "t P" #'org-tree-slide-play-with-timer
      )

(map! :map org-tree-slide-mode-map
      "C-j" #'org-tree-slide-move-next-tree
      "C-k" #'org-tree-slide-move-previous-tree
      )

(map! :map org-mode-map
      "M-)" #'org-timestamp-up-day
      "M-(" #'org-timestamp-down-day
      )

(after! org-tree-slide
  (org-tree-slide-presentation-profile)
  (setq org-tree-slide-slide-in-effect nil
      org-tree-slide-skip-outline-level 0
      org-tree-slide-header t
      org-tree-slide-fold-subtrees-skipped t))
#+end_src

** Gantt
#+begin_src elisp :noweb-ref packages
(package! elgantt
  :recipe (:host github :repo "legalnonsense/elgantt"))
#+end_src
** org-ql

[[https://github.com/alphapapa/org-ql][org-ql]] is great to query your org files using SQL-like queries. This is useful for structured aggregate searches and reports

#+begin_src elisp :noweb-ref configs
(map!
   (:leader
    :prefix "o o"
    "V" #'org-ql-view
    "t" #'org-ql-view-dispatch
    ))
#+end_src

#+begin_src elisp :noweb-ref packages
(package! org-ql)
#+end_src
*** Customized dblock
:PROPERTIES:
:ID:       2223bf52-8dca-4781-a074-ef38347ee60a
:END:

#+begin_src elisp :noweb-ref configs
(cl-defun org-dblock-write:org-ql (params)
  "Insert content for org-ql dynamic block at point according to PARAMS.
Valid parameters include:

  :query    An Org QL query expression in either sexp or string
            form.

  :columns  A list of columns, including `heading', `todo',
            `property',`priority',`deadline',`scheduled',`closed'.
            Each column may also be specified as a list with the
            second element being a header string.  For example,
            to abbreviate the priority column: (priority \"P\").
            For certain columns, like `property', arguments may
            be passed by specifying the column type itself as a
            list.  For example, to display a column showing the
            values of a property named \"milestone\", with the
            header being abbreviated to \"M\":

              ((property \"milestone\") \"M\").

  :sort     One or a list of Org QL sorting methods
            (see `org-ql-select').

  :take     Optionally take a number of results from the front (a
            positive number) or the end (a negative number) of
            the results.

  :ts-format  Optional format string used to format
              timestamp-based columns.

For example, an org-ql dynamic block header could look like
this (must be a single line in the Org buffer):

  ,#+BEGIN: org-ql :query (todo \"UNDERWAY\")
:columns (priority todo heading) :sort (priority date)
:ts-format \"%Y-%m-%d %H:%M\""
  (-let* (((&plist :query :columns :sort :ts-format :take :file) params)
          (query (cl-etypecase query
                   (string (org-ql--query-string-to-sexp query))
                   (list ;; SAFETY: Query is in sexp form: ask for confirmation, because it could contain arbitrary code.
                    (org-ql--ask-unsafe-query query)
                    query)))
          (columns (or columns '(heading todo (priority "P"))))
          ;; MAYBE: Custom column functions.
          (format-fns
           ;; NOTE: Backquoting this alist prevents the lambdas from seeing
           ;; the variable `ts-format', so we use `list' and `cons'.
           (list (cons 'todo (lambda (element)
                               (org-element-property :todo-keyword element)))
                 (cons 'heading (lambda (element)
                                  (org-make-link-string (format "id:%s" (car (org-element-map element 'headline (lambda (element) (org-id-get-create)))))
                                                        (org-element-property :raw-value element))))
                 (cons 'category (lambda (element)
                                   (print element)
                                  (org-element-property-inherited :CATEGORY element)))
                 (cons 'priority (lambda (element)
                                   (--when-let (org-element-property :priority element)
                                     (char-to-string it))))
                 (cons 'deadline (lambda (element)
                                   (--when-let (org-element-property :deadline element)
                                     (ts-format ts-format (ts-parse-org-element it)))))
                 (cons 'scheduled (lambda (element)
                                    (--when-let (org-element-property :scheduled element)
                                      (ts-format ts-format (ts-parse-org-element it)))))
                 (cons 'closed (lambda (element)
                                 (--when-let (org-element-property :closed element)
                                   (ts-format ts-format (ts-parse-org-element it)))))
                 (cons 'property (lambda (element property)
                                   (org-element-property (intern (concat ":" (upcase property))) element)))))
          (elements (org-ql-query :from (or file (current-buffer))
                                  :where query
                                  :select '(org-element-headline-parser (line-end-position))
                                  :order-by sort)))
    (when take
      (setf elements (cl-etypecase take
                       ((and integer (satisfies cl-minusp)) (-take-last (abs take) elements))
                       (integer (-take take elements)))))
    (cl-labels ((format-element (element)
                  (string-join (cl-loop for column in columns
                                        collect (or (pcase-exhaustive column
                                                      ((pred symbolp)
                                                       (funcall (alist-get column format-fns) element))
                                                      (`((,column . ,args) ,_header)
                                                       (apply (alist-get column format-fns) element args))
                                                      (`(,column ,_header)
                                                       (funcall (alist-get column format-fns) element)))
                                                    ""))
                               " | ")))
      ;; Table header
      (insert "| " (string-join (--map (pcase it
                                         ((pred symbolp) (capitalize (symbol-name it)))
                                         (`(,_ ,name) name))
                                       columns)
                                " | ")
              " |" "\n")
      (insert "|- \n")                  ; Separator hline
      (dolist (element elements)
        (insert "| " (format-element element) " |" "\n"))
      (delete-char -1)
      (org-table-align))))
#+end_src

#+begin_src elisp
(cl-defun org-dblock-write:org-ql (params)
  "Insert content for org-ql dynamic block at point according to PARAMS.
Valid parameters include:

  :query    An Org QL query expression in either sexp or non-sexp
            form.

  :columns  A list of columns, including `heading', `todo',
            `property', `priority', `deadline', `scheduled'.
            Each column may also be specified as a list with the
            second element being a header string.  For example,
            to abbreviate the priority column: (priority \"P\").
            For certain columns, like `property', arguments may
            be passed by specifying the column type itself as a
            list.  For example, to display a column showing the
            values of a property named \"milestone\", with the
            header being abbreviated to \"M\":

              ((property \"milestone\") \"M\").

  :sort     One or a list of Org QL sorting methods
            (see `org-ql-select').

  :take     Optionally take a number of results from the front (a
            positive number) or the end (a negative number) of
            the results.

  :ts-format  Optional format string used to format
              timestamp-based columns.

For example, an org-ql dynamic block header could look like:

,#+BEGIN: org-ql :query (todo \"UNDERWAY\") :columns (priority todo heading) :sort (priority date) :ts-format \"%Y-%m-%d %H:%M\""
  (-let* (((&plist :query :columns :sort :ts-format :take :file) params)
          (query (cl-etypecase query
                   (string (org-ql--query-string-to-sexp query))
                   (list  ;; SAFETY: Query is in sexp form: ask for confirmation, because it could contain arbitrary code.
                    (org-ql--ask-unsafe-query query)
                    query)))
          (columns (or columns '(heading todo (priority "P"))))
          ;; MAYBE: Custom column functions.
          (format-fns
           ;; NOTE: Backquoting this alist prevents the lambdas from seeing
           ;; the variable `ts-format', so we use `list' and `cons'.
           (list (cons 'todo (lambda (element)
                               (org-element-property :todo-keyword element)))
                 (cons 'heading (lambda (element)
                                  (org-make-link-string (format "id:%s" (org-element-property :ID element))
                                                        (org-element-property :raw-value element))))

                 (cons 'category (lambda (element)
                                   (let* ((location (org-id-find (org-element-property :ID element)))
                                          (marker (make-marker)))
                                     (set-marker marker (cdr location) (find-file-noselect (car location)))
                                     (org-entry-get marker "CATEGORY" t))))
                 (cons 'priority (lambda (element)
                                   (--when-let (org-element-property :priority element)
                                     (char-to-string it))))
                 (cons 'deadline (lambda (element)
                                   (--when-let (org-element-property :deadline element)
                                     (ts-format ts-format (ts-parse-org-element it)))))
                 (cons 'scheduled (lambda (element)
                                    (--when-let (org-element-property :scheduled element)
                                      (ts-format ts-format (ts-parse-org-element it)))))
                 (cons 'property (lambda (element property)
                                   (org-element-property (intern (concat ":" (upcase property))) element)))))
          (elements (org-ql-query :from (or file (current-buffer))
                                  :where query
                                  :select '(progn (org-id-get-create) (org-element-headline-parser (line-end-position)))
                                  :order-by sort)))
    (when take
      (setf elements (cl-etypecase take
                       ((and integer (satisfies cl-minusp)) (-take-last (abs take) elements))
                       (integer (-take take elements)))))
    (cl-labels ((format-element
                 (element) (string-join (cl-loop for column in columns
                                                 collect (or (pcase-exhaustive column
                                                               ((pred symbolp)
                                                                (funcall (alist-get column format-fns) element))
                                                               (`((,column . ,args) ,_header)
                                                                (apply (alist-get column format-fns) element args))
                                                               (`(,column ,_header)
                                                                (funcall (alist-get column format-fns) element)))
                                                             ""))
                                        " | ")))
      ;; Table header
      (insert "| " (string-join (--map (pcase it
                                         ((pred symbolp) (capitalize (symbol-name it)))
                                         (`(,_ ,name) name))
                                       columns)
                                " | ")
              " |" "\n")
      (insert "|- \n")  ; Separator hline
      (dolist (element elements)
        (insert "| " (format-element element) " |" "\n"))
      (delete-char -1)
      (org-table-align))))
#+end_src
** Tables

#+begin_src elisp :noweb-ref configs
(map! :map embark-org-table-cell-map
      "x" #'org-table-blank-field)
#+end_src

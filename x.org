* X

Settings to configure monitors, window managers and X11

** .Xmodmap
:PROPERTIES:
:ID:       a21ede96-424c-4e23-8cea-df612295bfd0
:END:

Changes to my key mapping:

- Swap =Caps_Lock= and =Control=
- Let the left and right =Alt= keys behave independently

#+begin_src conf :tangle .Xmodmap
clear Mod1

keysym Alt_R = Super_L

add Mod1 = Alt_L

remove Lock = Caps_Lock
remove Control = Control_L
keysym Control_L = Caps_Lock
keysym Caps_Lock = Control_L
add Lock = Caps_Lock
add Control = Control_L
#+end_src
** Wallpaper

#+begin_src elisp :noweb-ref configs
(defvar ccc/wallpaper)
(defun ccc/set-wallpaper (&optional image)
  (let ((wallpaper (or image ccc/wallpaper)))
    (if wallpaper
        (start-process-shell-command "xwallpaper" nil (format "xwallpaper --center %s" (shell-quote-argument (f-expand wallpaper))))
      (message "No wallpaper selected"))
    ))

(map! :map embark-file-map
      "C-w" #'ccc/set-wallpaper)
#+end_src

** Locking

I use [[https://github.com/Raymo111/i3lock-color][i3lock-color]] for locking my screen

#+begin_src elisp :noweb-ref configs

(defvar ccc/lock-args
  '(("--clock")
    ("--fill")
    ("--image" "<image>")
    ("--date-pos" "tx:ty+100 ")
    ("--date-align" "2")
    ("--date-size" "75")
    ("--date-color" "6e6e6eaa")
    ("--date-font" "Iosevka")
    ("--time-pos" "w-50:h-170")
    ("--time-align" "2")
    ("--time-size" "75")
    ("--time-color" "6e6e6eaa")
    ("--time-font" "Iosevka")
    ("--ring-width" "4")
    ("--ring-color" "9a32cd77")
    ("--keyhl-color" "fc008577")
   ))

(defvar ccc/lock-image)

(defun lock-command ()
  (let* ((args (s-join " " (seq-map (apply-partially #'s-join "=") ccc/lock-args))))
    (format "i3lock --nofork %s" (s-replace "<image>" (shell-quote-argument (f-expand ccc/lock-image)) args))))

(defun lock ()
  (interactive)
  (shell-command (lock-command)))
#+end_src

#+begin_src elisp :noweb-ref exwm-keys
([?\s-L] . lock)
#+end_src

The screen locking package needs to be specified in your =config.scm=

#+begin_src lisp
(screen-locker-service i3lock-color "i3lock")
#+end_src
** Screenshots
#+begin_src elisp :noweb-ref configs
; Screenshots
(defvar scrot-format "scrot-%Y-%m-%d-%H-%M-%S.png"
  "File name format to save screenshots with")

(defvar scrot-directory "~"
  "Directory to save screenshots to")

(defun scrot ()
  (interactive)
  (with-temp-buffer
    (shell-command (format "scrot --focused %s" (f-join scrot-directory scrot-format)) (current-buffer))))

(defun scrot-select ()
  (interactive)
  (with-temp-buffer
    (shell-command "scrot --select ~/scrot-%Y-%m-%d-%H-%M-%S.png" (current-buffer))))
#+end_src

#+begin_src elisp :noweb-ref exwm-keys
([?\s-c] . scrot)
([?\s-C] . scrot-select)
#+end_src
** Compositor

I use picom as my compositor

A compositor is required to enable transparency in emacs

#+begin_src elisp :noweb-ref configs
(defvar ccc/alpha 96)

;; 'alpha-background doesn't seem to work with my emacs version
;; (set-frame-parameter nil 'alpha-background 90)
;; (add-to-list 'default-frame-alist '(alpha-background . 90))
(set-frame-parameter nil 'alpha ccc/alpha)
(add-to-list 'default-frame-alist `(alpha . ,ccc/alpha))
#+end_src

#+begin_src elisp :noweb-ref prodigy-services :results raw
(prodigy-define-service
    :name "Picom"
    :command "picom"
    :kill-process-buffer-on-stop t)

;; Autostart picom service
(prodigy-start-service (prodigy-find-service "Picom"))
#+end_src

** EXWM
:PROPERTIES:
:ID:       adb6de39-b7dd-4359-a026-c5b8c5c6a029
:END:

[[https://github.com/ch11ng/exwm][EXWM]] is my chosen window manager.

#+begin_src elisp :tangle .exwm :results none
(require 'exwm)
(require 'exwm-config)
(require 'exwm-randr)

(defvar exwm-app-launcher--prompt "$ "
  "Prompt for the EXWM application launcher")

(setq exwm-workspace-number 4)

;; Make the alternate doom leader key work in EXWM buffers
(exwm-input-set-key (kbd doom-leader-alt-key) doom-leader-map)

(setq exwm-input-global-keys
          `(
            <<exwm-keys>>
            ([?\s-k] . +workspace/close-window-or-workspace)
            ([?\s-w] . evil-window-up)
            ([?\s-s] . evil-window-down)
            ([?\s-a] . evil-window-left)
            ([?\s-d] . evil-window-right)
            ([?\C-\s-d] . evil-window-increase-width)
            ([?\C-\s-a] . evil-window-decrease-width)
            ([?\C-\s-w] . evil-window-increase-height)
            ([?\C-\s-s] . evil-window-decrease-height)
            ([?\s-W] . evil-window-move-very-top)
            ([?\s-S] . evil-window-move-very-bottom)
            ([?\s-A] . evil-window-move-far-left)
            ([?\s-D] . evil-window-move-far-right)
            ([?\s-f] . ace-window)
            ([?\s-F] . exwm-layout-toggle-fullscreen)
            ([?\s-m] . exwm-workspace-move-window)
            ([?\s-l] . ace-jump-line-mode)
            ;; Launch application.
            ([?\s-r] . (lambda (command)
                         (interactive (list (read-shell-command "$ ")))
                         (start-process-shell-command command nil command)))
            ;; 's-N': Switch to certain workspace.
            ,@(mapcar (lambda (i)
                        `(,(kbd (format "s-%d" (1+ i))) .
                          (lambda ()
                            (interactive)
                            (exwm-workspace-switch ,i))))
                      (number-sequence 0 exwm-workspace-number))))

;; (setq exwm-manage-configuration '(((string-match-p )))

;; The following snippet can be used to completely disable mode-specific keys:
(define-key exwm-mode-map (kbd "C-c") nil)

<<exwm-configs>>

(add-hook 'exwm-randr-screen-change-hook
          (lambda ()
            (start-process-shell-command
             "autorandr" nil "autorandr --change")))

(add-hook 'exwm-update-class-hook
          (lambda ()
            (exwm-workspace-rename-buffer exwm-class-name)))


(add-hook 'exwm-update-title-hook
        (lambda ()
            (when (not exwm-instance-name)
              (exwm-workspace-rename-buffer exwm-title))))


(exwm-randr-enable)
(exwm-enable)
(exwm-config-misc)
(ccc/set-wallpaper)
#+end_src

*** Modeline

#+begin_src elisp :noweb-ref packages
(package! exwm-modeline)
#+end_src

#+begin_src elisp :noweb-ref configs
(after! exwm
  (require 'exwm-modeline)
  (add-hook 'exwm-init-hook #'exwm-modeline-mode)
  )
#+end_src


** Monitors
I use ~autorandr~ to manage monitor orientation

#+begin_src elisp :noweb-ref configs
(defun cc/mon-reload ()
  (interactive)
  (start-process "mon-reload" nil "autorandr" "--change" "horizontal"))

(map! :leader
      :n "W R" #'cc/mon-reload)
#+end_src

** Screen Drawing
I use [[https://github.com/bk138/gromit-mpx][gromit-mpx]] to draw on my screen

#+begin_src elisp :noweb-ref configs
(defun gromit-mpx ()
  (interactive)
  (start-process-shell-command "gromit-mpx" nil "gromit-mpx -a"))
#+end_src

#+begin_src elisp :noweb-ref exwm-keys
([?\s-g] . gromit-mpx)
#+end_src

* Finance

I use [[https://hledger.org/][hledger]] for my financial bookkeeping. I love the [[https://plaintextaccounting.org/][plain text accounting]] approach to bookkeeping

** Config

#+begin_src elisp :noweb-ref configs
(add-to-list 'auto-mode-alist '("\\.hledger\\'" . ledger-mode))
(after! ledger-mode
  (setq ledger-clear-whole-transactions t
        ledger-report-use-strict t
        ledger-reports `(("Balance" "%(binary) -f %(ledger-file) bal --tree --cleared --real --exchange $ ^Assets ^Liabilities")
                         ("Savings" "%(binary) -f %(ledger-file) bal ^Assets:Savings --exchange $")
                         ("Spending" "%(binary) -f %(ledger-file) bal ^Assets:Bank ^Liabilities:CreditCard --exchange $")
                         ("Register" "%(binary) -f %(ledger-file) reg --width 200")
                         ("Account" "%(binary) -f %(ledger-file) reg %(account)")
                         ("Budget (Assets)" "%(binary) -f %(ledger-file) bal --budget --exchange $ -p %(month) ^Assets ^Lia")
                         ("Budget" "%(binary) -f %(ledger-file) bal --budget --tree --exchange $ -p %(month) ^Income ^Expenses ^Assets:Investment ^Liabilities:House ")
                         ("Budget (All)" "%(binary) -f %(ledger-file) bal --budget --tree --exchange $ -p %(month) --empty ^Income ^Expenses ^Assets:Investment ^Liabilities:House"))

        ;; hledger compatibility
        ledger-binary-path "hledger"
        ledger-mode-should-check-version nil
        ledger-report-auto-width nil
        ledger-report-links-in-register nil
        ledger-report-native-highlighting-arguments '("--color=yes")

        )

  (defun ledger-report-toggle-real ()
    (interactive)
    (unless (derived-mode-p 'ledger-report-mode)
      (user-error "Not a ledger report buffer"))

    (save-match-data
      (if (string-match "--real" ledger-report-cmd)
          (setq ledger-report-cmd (replace-match "" nil nil ledger-report-cmd))
        (setq ledger-report-cmd (concat ledger-report-cmd " --real "))))
    (ledger-report-redo))

  (defun ledger-report-toggle-unbudgeted ()
    (interactive)
    (unless (derived-mode-p 'ledger-report-mode)
      (user-error "Not a ledger report buffer"))

    (save-match-data
      (if (string-match "--empty" ledger-report-cmd)
          (setq ledger-report-cmd (replace-match "" nil nil ledger-report-cmd))
        (setq ledger-report-cmd (concat ledger-report-cmd " --empty "))))
    (ledger-report-redo))

(map! :mode ledger-report-mode
      "C-c C-v" #'ledger-report-toggle-real
      "C-c C-u" #'ledger-report-toggle-unbudgeted
      "C-c C-n" #'ledger-report-next-month
      "C-c C-p" #'ledger-report-previous-month
      :n "S" #'ledger-report-select-report)

(map! :mode ledger-mode
      :localleader
      :n "q" #'ledger-align-xact)

(map! :mode ledger-mode
      "C-j" #'ledger-navigate-next-uncleared
      "C-k" #'ledger-navigate-previous-uncleared
      )

  )
#+end_src

I put my ledger configuration data (everthing in ledger besides actual transacitons) into org files that make up my [[file:brain.org][brain]]. This tangles all of those org files into a single ledger file

#+begin_src elisp :noweb-ref configs
(defun finance-tangle ()
  (interactive)

  ;; Concat all agenda files together
  (let* ((content-list (mapcar (lambda (fname)
                                 (with-current-buffer (find-file-noselect fname) (buffer-string)))
                               (org-agenda-files)))
         (content (apply #'s-concat content-list)))

    (with-current-buffer (find-file-noselect "/tmp/chaise-finance.org")
      ;; Insert into concatenated agenda files into temp buffer
      (delete-region (point-min) (point-max))
      (insert content)
      ;; Tangle the src block that defines where to tangle to
      (org-babel-goto-named-src-block "ledger")
      (save-buffer)
      (org-babel-tangle '(4))
      (save-buffer)
      (kill-buffer))
    ))

(map! :leader
      "o o f" #'finance-tangle)

#+end_src

** Snippets
:PROPERTIES:
:snippet_mode: ledger-mode
:END:
*** transaction
#+begin_src snippet :tangle (get-snippet-path)
# name: transaction
# key: tr
# --
`(ledger-read-transaction)`
    Expenses:$1
    $0
#+end_src
** Bookmarks
#+begin_src elisp :noweb-ref bookmarks
("ledger"
 (filename . "~/ledger/main.ledger"))
#+end_src

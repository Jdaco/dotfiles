* Brain
These are my configurations needed to work with my main notes and agendas. These files contain sensitive data so I don't include them on every computer.

#+begin_src elisp :noweb-ref configs
(defun find-place () (interactive)
        (let* ((candidates (org-map-entries
                            '(s-join "/" (org-get-outline-path t)) nil
                            `(,(f-join org-directory "other/places.org")))))

        (org-ql-search 'org-agenda-files
            `(children (property "Place" ,(completing-read "Places: " candidates))) :super-groups '((:auto-category t)))))


(defun ccc/find-areas ()
    (read-file-name "Areas: " "~/roam/areas/" nil (confirm-nonexistent-file-or-buffer) nil #'f-file-p))

(defun org-dblock-write:contacts (params)
(org-dblock-write:org-ql `(:file ,(f-join org-directory "other/contacts.org")
                            :columns (heading todo ((property "Place") "Place"))
                            :query (children (and (heading "Services") (children (heading ,(plist-get params :service))))))))

(map! :leader
    :prefix ("o f" . "Find")
    "a" (cmd! (find-file (ccc/find-areas)))
    "p" #'find-place)
#+end_src

#+begin_src elisp :noweb-ref packages
(package! emacsql-sqlite3)
#+end_src

** Search
*** Deft

I use [[https://jblevins.org/projects/deft/][Deft]] to search my org files using general text serach

#+begin_src elisp :noweb-ref configs
(setq deft-directory (f-join org-directory "notes"))
#+end_src

*** org-ql

[[https://github.com/alphapapa/org-ql][org-ql]] is great to query your org files using SQL-like queries. This is useful for structured aggregate searches and reports

#+begin_src elisp :noweb-ref configs
(map!
   (:leader
    :prefix "o o"
    "V" #'org-ql-view
    ))
#+end_src

#+begin_src elisp :noweb-ref packages
(package! org-ql)
#+end_src

**** Customized dblock

#+begin_src elisp :noweb-ref configs
(cl-defun org-dblock-write:org-ql (params)
  "Insert content for org-ql dynamic block at point according to PARAMS.
Valid parameters include:

  :query    An Org QL query expression in either sexp or non-sexp
            form.

  :columns  A list of columns, including `heading', `todo',
            `property', `priority', `deadline', `scheduled'.
            Each column may also be specified as a list with the
            second element being a header string.  For example,
            to abbreviate the priority column: (priority \"P\").
            For certain columns, like `property', arguments may
            be passed by specifying the column type itself as a
            list.  For example, to display a column showing the
            values of a property named \"milestone\", with the
            header being abbreviated to \"M\":

              ((property \"milestone\") \"M\").

  :sort     One or a list of Org QL sorting methods
            (see `org-ql-select').

  :take     Optionally take a number of results from the front (a
            positive number) or the end (a negative number) of
            the results.

  :ts-format  Optional format string used to format
              timestamp-based columns.

For example, an org-ql dynamic block header could look like:

#+BEGIN: org-ql :query (todo \"UNDERWAY\") :columns (priority todo heading) :sort (priority date) :ts-format \"%Y-%m-%d %H:%M\""
  (-let* (((&plist :query :columns :sort :ts-format :take :file) params)
          (query (cl-etypecase query
                   (string (org-ql--plain-query query))
                   (t query)))
          (columns (or columns '(heading todo (priority "P"))))
          ;; MAYBE: Custom column functions.
          (format-fns
           ;; NOTE: Backquoting this alist prevents the lambdas from seeing
           ;; the variable `ts-format', so we use `list' and `cons'.
           (list (cons 'todo (lambda (element)
                               (org-element-property :todo-keyword element)))
                 (cons 'heading (lambda (element)
                                  (org-make-link-string (format "id:%s" (org-element-property :ID element))
                                                        (org-element-property :raw-value element))))

                 (cons 'category (lambda (element)
                                   (let* ((location (org-id-find (org-element-property :ID element)))
                                          (marker (make-marker)))
                                     (set-marker marker (cdr location) (find-file-noselect (car location)))
                                     (org-entry-get marker "CATEGORY" t))))
                 (cons 'priority (lambda (element)
                                   (--when-let (org-element-property :priority element)
                                     (char-to-string it))))
                 (cons 'deadline (lambda (element)
                                   (--when-let (org-element-property :deadline element)
                                     (ts-format ts-format (ts-parse-org-element it)))))
                 (cons 'scheduled (lambda (element)
                                    (--when-let (org-element-property :scheduled element)
                                      (ts-format ts-format (ts-parse-org-element it)))))
                 (cons 'property (lambda (element property)
                                   (org-element-property (intern (concat ":" (upcase property))) element)))))
          (elements (org-ql-query :from (or file (current-buffer))
                                  :where query
                                  :select '(progn (org-id-get-create) (org-element-headline-parser (line-end-position)))
                                  :order-by sort)))
    (when take
      (setf elements (cl-etypecase take
                       ((and integer (satisfies cl-minusp)) (-take-last (abs take) elements))
                       (integer (-take take elements)))))
    (cl-labels ((format-element
                 (element) (string-join (cl-loop for column in columns
                                                 collect (or (pcase-exhaustive column
                                                               ((pred symbolp)
                                                                (funcall (alist-get column format-fns) element))
                                                               (`((,column . ,args) ,_header)
                                                                (apply (alist-get column format-fns) element args))
                                                               (`(,column ,_header)
                                                                (funcall (alist-get column format-fns) element)))
                                                             ""))
                                        " | ")))
      ;; Table header
      (insert "| " (string-join (--map (pcase it
                                         ((pred symbolp) (capitalize (symbol-name it)))
                                         (`(,_ ,name) name))
                                       columns)
                                " | ")
              " |" "\n")
      (insert "|- \n")  ; Separator hline
      (dolist (element elements)
        (insert "| " (format-element element) " |" "\n"))
      (delete-char -1)
      (org-table-align))))
#+end_src

** org-ql
#+begin_src elisp :noweb-ref configs
(setq org-ql-views '(("Visions"
                     :buffers-files org-agenda-files
                     :query (tags-local "vision")
                     :super-groups ((:auto-category)))
                    ("Fitness"
                     :buffers-files org-agenda-files
                     :query (and (category "Fitness") (tags "goal") (todo "PROGRESS") (parent (tags "progression")))
                     :super-groups ((:auto-parent))
                     )
                    ("Recipes"
                     :buffers-files org-agenda-files
                     :query (tags-local "recipe")
                     :super-groups ((:auto-category)))
                    ("Maintenance"
                     :buffers-files org-agenda-files
                     :query (and (tags "maintenance") (todo))
                     :super-groups ((:auto-category)))
                    ("Work Queue"
                     :buffers-files org-agenda-files
                     :query (and
                             (not (scheduled))
                             (not (todo "WISH" "SHIPPING"))
                             (not (tags "ARCHIVE" "recipe" "certification" "book" "goal" "vision" "training" "progression"))
                             (not (path "contacts.org"))
                             (todo))
                     :sort priority
                     :super-groups ((:name "In Progress" :todo "PROGRESS")
                                    (:name "Waiting" :todo "WAITING")
                                    (:priority "A")
                                    (:auto-category)))
                    ("Wishlist"
                     :buffers-files org-agenda-files
                     :query (todo "WISH" "SHIPPING")
                     :sort priority
                     :super-groups ((:name "In Progress" :todo "SHIPPING")
                                       (:auto-category)))
                       ("Owned"
                        :buffers-files org-agenda-files
                        :query (or (and (tags-local "owned") (not (tags-local "book"))) (todo "OWNED"))
                        :sort priority
                        :super-groups ((:auto-category)))
                       ("Consumables"
                        :buffers-files org-agenda-files
                        :query (tags-local "consumable")
                        :sort priority
                        :super-groups ((:auto-category)))
                       ("Goals"
                        :buffers-files org-agenda-files
                        :query (tags-local "goal")
                        :super-groups ((:name "In Progress" :todo "PROGRESS")
                                       (:auto-category)))
                       ("Training"
                        :buffers-files org-agenda-files
                        :query (tags-local "training")
                        :super-groups ((:auto-category)))
                       ("Books"
                        :buffers-files org-agenda-files
                        :query (tags-local "book")
                        :sort (priority todo)
                        :super-groups ((:name "In Progress" :todo "PROGRESS")
                                       (:priority "A")
                                       (:auto-category)))
                       ("Certifications"
                        :buffers-files org-agenda-files
                        :query (tags-local "certification")
                        :super-groups ((:name "In Progress" :todo "PROGRESS")
                                       (:name "Done" :todo "DONE")
                                       (:auto-category)))  ))
#+end_src

** Flash Cards

#+begin_src elisp :noweb-ref configs
(map!
   (:leader
    :prefix ("o o D" . "Drills")
     "d" #'org-drill
     "t" #'org-drill-tree
     "r" #'org-drill-resume
     "c" #'org-drill-cram
    ))

(require 'org-drill)

(setq org-drill-maximum-items-per-session 40)
#+end_src

#+begin_src elisp :noweb-ref packages
(package! org-drill)
#+end_src

#+begin_src elisp :noweb-ref bookmarks
("drills"
  (filename . "~/roam/other/drills.org"))
("bookmarks"
  (filename . "~/roam/other/bookmarks.org"))
("contacts"
  (filename . "~/roam/other/contacts.org"))
("places"
  (filename . "~/roam/other/places.org"))
("books"
  (filename . "~/roam/books/books.bib"))
#+end_src
#+end_src
** Roam
:PROPERTIES:
:ID:       c94f5761-3a42-44df-afd3-55f409902dbf
:END:

[[https://www.orgroam.com/][org-roam]] applies the [[https://zettelkasten.de/posts/overview/][Zettelkasten Method]] to Emacs and Org mode. The idea is that you have many small note files with no strict structure, that link use hyperlinks to relate to each other. Org-roam helps in this by keeping track of the *backlinks* so you can easily see which notes link to the note that you're currently looking at.

#+begin_src elisp :noweb-ref configs :results none

(setq org-roam-tag-sources '(prop last-directory)
      org-roam-file-exclude-regexp (concat (expand-file-name org-roam-directory) "areas")
      org-roam-capture-templates '(("d" "default" plain "%?"
                                    :target (file+head "notes/%<%Y%m%d%H%M%S>-${slug}.org" "#+title: ${title}\n\n- tags :: ")
                                    :unnarrowed t)
                                   ("c" "conference" plain "%?"
                                    :target "conferences/%<%Y%m%d%H%M%S>-${slug}"
                                    :head "* ${title}\n\n- tags :: "
                                    :unnarrowed t)
                                   ("s" "Store" plain "%?"
                                    :target "stores/%<%Y%m%d%H%M%S>-${slug}"
                                    :head "#+title: ${title}\n#+roam_key: \n\n- tags :: "
                                    :unnarrowed t)
                                   ("r" "Recipe" plain "%?"
                                    :target (file+head "recipes/%<%Y%m%d%H%M%S>-${slug}.org" "#+title: ${title}\n\n- tags :: ")
                                    :unnarrowed t)
                                   ("R" "Resource" plain "%?"
                                    :target (file+head "notes/resources/%<%Y%m%d%H%M%S>-${slug}.org" "#+title: ${title}\n\n- tags :: ")
                                    :unnarrowed t)
                                   ("P" "Presentation" plain "%?"
                                    :target "presentations/%<%Y%m%d%H%M%S>-${slug}"
                                    :head "#+title: ${title}\n\n- tags :: "
                                    :unnarrowed t)
                                   ("p" "Programming Language" plain
                                    (file "~/roam/areas/software/templates/programming_language.org")
                                    :target "notes/%<%Y%m%d%H%M%S>-${slug}"))
      )
#+end_src

** Books

I prefer to read ebooks because being able to highlight and copy text from the book makes it much easier to take notes. Emacs has a great system for reading and annotating PDF files ([[https://github.com/politza/pdf-tools][pdf-tools]]). I store all of my ebooks in a single flat directory. Metadata about each book is stored in a [[http://www.bibtex.org/][Bibtex]] file and each books is named after it's bibtex entry ID.

- Note :: [[https://books.google.com/][books.google.com]] provides bibtex-style citations for books in it's database

I use [[https://github.com/weirdNox/org-noter][org-noter]] when I'm taking notes on the book. It provides an interface with the PDF and the org-mode notes side-by-side. Org-noter will add metadata to your notes to link them to the page in the PDF that they're about


*** org-noter
#+begin_src elisp :noweb-ref configs :results none
(setq org-noter-always-create-frame nil
      org-noter-notes-search-path '("~/roam/books")
      org-noter-doc-split-percentage '(0.67 . 0.33)
                )

(undefine-key! pdf-view-mode-map :n "i")
(map! :after org-noter
      :mode org-noter-doc-mode
      :n "i" #'org-noter-insert-note)
#+end_src

#+begin_src elisp :noweb-ref packages
(package! org-noter-pdftools)
#+end_src

*** Bibtex
#+begin_src elisp :noweb-ref configs
(setq
          citar-bibliography '("~/roam/books/books.bib")
          citar-library-paths '("~/roam/books/")
          citar-notes-paths '("~/roam/books/")
          citar-default-action #'citar-open-files
          org-ref-default-bibliography '("~/roam/books/books.bib")
          reftex-default-bibliography org-ref-default-bibliography
          org-ref-pdf-directory "~/roam/books/"
          bibtex-completion-notes-template-multiple-files "#+TITLE: ${title}
,#+ROAM_KEY: cite:${=key=}

- tags :: %?"
                )

(defun bibtex-add-entry (entry)
  (let* ((id (with-temp-buffer
                  (bibtex-mode)
                  (insert entry)
                  (bibtex-completion-key-at-point)))
        (exists (bibtex-completion-get-entry id)))
    (if exists
        (message (format "Entry %s already exists" id))
      (with-current-buffer (find-file-noselect bibtex-completion-bibliography)
        (end-of-buffer)
        (insert "\n" entry)
        (save-buffer)))))

(map! :leader
      "o B" citar-default-action)

#+end_src

#+begin_src elisp :noweb-ref packages
(package! org-roam-bibtex)
(package! ivy-bibtex)
(package! org-ref)
#+end_src

*** ivy-books
#+begin_src elisp :noweb-ref configs
(after! ivy
  (defun ivy-books--get-bibtex (candidate)
    (alist-get 'id candidate)
    (let ((bibtex (url-to-string
                   (format "https://books.google.com/books?id=%s&output=bibtex" (alist-get 'id candidate)))))
      (bibtex-add-entry bibtex)))


  (defun ivy-books--url-retrieve-from-google ()
    "Retrieve information of book using google books api."
    (switch-to-buffer
     (url-retrieve-synchronously
      (concat "https://www.googleapis.com/books/v1/volumes?q=" helm-pattern)))
    (let ((response-string (buffer-substring-no-properties
                            url-http-end-of-headers (point-max))))
      (kill-buffer (current-buffer))
      (json-read-from-string (decode-coding-string response-string 'utf-8))))

  (defun ivy-books--extract-values-from-google (item)
    "Extract attribute from result of api.
ITEM is each book information."
    (let ((title "")
          (author "")
          (publisher "")
          (publishedDate ""))
      (dolist (i item)
        (when (string= "volumeInfo" (car i))
          (dolist (j (cdr i))
            (when (string= "title" (car j))
              (setq title (cdr j)))
            (when (string= "authors" (car j))
              (setq author (cdr j)))
            (when (string= "publisher" (car j))
              (setq publisher (cdr j)))
            (when (string= "publishedDate" (car j))
              (setq publishedDate (cdr j)))
            )))
      (cons
       (format "Title:%s, Authors:%s, Publisher:%s, PublishedDate:%s" title author publisher publishedDate)
       item)))

  (defun ivy-books--candidates-from-google ()
    (mapcar 'ivy-books--extract-values-from-google (cdr (nth 2 (ivy-books--url-retrieve-from-google)))))

  (defun ivy-books ()
    "Books searcher with ivy interface."
    ; This was converted from Helm and doesn't work
    ; It needs to be updated to provide dynamic candidates from the search results
    (interactive)
      (ivy-read "Search Books: " (ivy-books--candidates-from-google)
                :action #'ivy-books--get-bibtex))
  )
#+end_src

*** pdf-tools
| Command                                   | Key       | Description             |
|-------------------------------------------+-----------+-------------------------|
| pdf-view-goto-page                        | g p       |                         |
| pdf-view-midnight-minor-mode              | z m       | Dark mode               |
| pdf-view-fit-height-to-window             | H         |                         |
| pdf-view-fit-width-to-window              | W         |                         |
| pdf-annot-add-highlight-markup-annotation | C-c C-a h | Highlight selected text |
| pdf-annot-list-annotations                | C-c C-a l | List all annotations    |

#+begin_src elisp :noweb-ref configs
(map! :after pdf-tools
      :mode pdf-view-mode
      :n "g p" #'pdf-view-goto-page
      )
#+end_src
*** Capture

Used to capture books I want to read into the right category

#+begin_src elisp :noweb-ref capture-templates
("Book" :keys "b" :function (lambda () (goto-or-create-heading "Books"))
    :book (lambda () (car (citar-select-ref)))
    :template-file "~/roam/areas/org/templates/book.org")

("Task" :keys "t" :file (lambda () (ccc/find-areas)) :olp ("Tasks") :template "* TODO %?")
("Event" :keys "e" :file (lambda () (ccc/find-areas)) :olp ("Events") :template-file ,(f-join dotfiles-directory "templates" "org" "event.org"))

#+end_src
*** Tasks
#+begin_src elisp
(defvar task-queue nil)

(defvar task-current nil)

(defvar images-file "~/roam/other/images.org")

(defun queue-task (cmd)
  (interactive)
  (if task-current
      (setq task-queue (append task-queue (list cmd)))
      (start-task cmd))
  task-queue)

(setq download-command
  "/home/chaise/.local/bin/gallery-dl --dest /home/chaise/gallery-dl --filter 'date > datetime.utcfromtimestamp(%d)' -A 10 %s")

(defun next-task ()
  (interactive)
  (when task-queue
    (start-task (car task-queue)))
    (setq task-queue (cdr task-queue)))

(defun yesterday-start ()
  (let ((yesterday (decode-time (time-add (current-time) (* 3600 -24)))))
    (time-convert
     (encode-time (make-decoded-time :second 0 :minute 0 :hour 0 :day (nth 3 yesterday) :month (nth 4 yesterday) :year (nth 5 yesterday)))
     'integer)
    ))

(defun start-task (cmd)
  (interactive)
  (let* ((default-directory "/home/chaise")
         (process (start-process-shell-command "task" "*tasks*" cmd)))
    (setq task-current cmd)
    (set-process-sentinel process (lambda (process event) (setq task-current nil) (next-task)))
    ))

(defun download-images ()
  (interactive)
  (dolist (link (image-links))
    (let ((cmd (format download-command (yesterday-start) link)))
      (queue-task cmd))
    )
  )

(defun image-links ()
  (with-current-buffer
      (find-file-noselect images-file)
(-non-nil (org-map-entries
   (lambda ()
        (forward-char 3)
     (let ((hyperlink (s-match "^\\[\\[\\(http.+?\\)\\]\\(?:\\[.+?\\]\\)?\\]" (org-get-heading))))
       (when hyperlink
         (nth 1 hyperlink)
       )
       ))))
      )
  )
#+end_src

#+RESULTS:
: image-links


* Machines
- Data files
  + Elfeed database
  + Emails
  + Org files (roam + inbox.org)
  + Syncthing shares
  + Project Repos


These are system specific settings for each of my machines


** Alpha
:PROPERTIES:
:name: Chaise Conn
:email:    chaise.conn@protonmail.com
:header-args:    :noweb yes :mkdirp true
:ID: alpha
:END:

My primary workstation

#+begin_src elisp :noweb-ref configs
(setq dotfiles-directory "~/dotfiles"
      org-directory "~/roam"
      org-roam-directory "~/roam"
      inbox-file "~/inbox.org"
      org-agenda-files `(,(f-join org-roam-directory "areas"))
      scrot-directory "~/Downloads")
#+end_src

#+include: ./base.org
#+include: ./email.org
#+include: ./finance.org
#+include: ./rss.org
#+include: ./brain.org

*** X
**** Autorandr
#+begin_src :tangle ~/.config/autorandr/desktop/config
output VGA-1
crtc 0
mode 1920x1080
pos 1080x0
primary
rate 60.00
output DVI-D-1
crtc 1
mode 1920x1080
pos 0x1080
rate 60.00
rotate right
output DVI-D-2
crtc 2
mode 1920x1080
pos 1080x1080
rate 60.00
output HDMI-3
crtc 3
mode 1920x1080
pos 3000x1080
rate 60.00
rotate left
#+end_src

**** Monitors
#+begin_src elisp :noweb-ref exwm-configs
(setq exwm-randr-workspace-monitor-plist '(0 "VGA-1" 1 "DVI-D-1" 2 "DVI-D-2" 3 "HDMI-3"))
#+end_src
*** Disks

| Drive                                | Size  | Encrypted? | Filesystem | Purpose |
|--------------------------------------+-------+------------+------------+---------|
| [[id:4c8f7bbc-fcef-419e-b7c3-c7fa335ada0d][Seagate Barracuda ST2000DM001-1CH164]] | 2TB   | Yes        | ext4       | Data    |
| Samsung SSD 850 PRO                  | 256GB | No         | btrfs      | Root    |

**** Data
:PROPERTIES:
:ID:       4c8f7bbc-fcef-419e-b7c3-c7fa335ada0d
:END:

GNU Guix currently does not support unencrypting LUKS devices with a keyfile at boot, so for now I have unlock and mound the drive manually after boot.

***** Preparation
Shred the disk

#+begin_src sh
sudo shred -n 1 -v --random-source /dev/random /dev/sda
#+end_src

Create the partition

#+begin_src sh :dir /sudo::/ :results output replace
#!/usr/bin/env bash
DEV=/dev/sda

parted --script ${DEV} mktable gpt
parted --script --align optimal ${DEV} mkpart Data 0% 100%
#+end_src

Create the encryption key

#+begin_src sh :dir /sudo::/ :results output replace
exec 2>&1
dd bs=512 count=4 if=/dev/random of=/mnt/machines/alpha/sda
#+end_src

Encrypt the partition

#+begin_src sh :dir /sudo::/
# --sectore-size: Increasing sector size from 512 bytes to 4096 bytes can provide better performance on most of the modern storage devices and also with some hw encryption accelerators
# --use-random : Block until entropy is available instead of using weak entropy (like /dev/urandom)
cryptsetup luksFormat --use-random --batch-mode --key-file /mnt/machines/alpha/sda /dev/sda1
#+end_src

Create the filesystem

#+begin_src sh :async :dir /sudo::/
exec 2>&1
TEMP_NAME=$(basename $(mktemp -q))

cryptsetup luksOpen --key-file /mnt/machines/alpha/sda /dev/sda1 ${TEMP_NAME}
mkfs.ext4 /dev/mapper/${TEMP_NAME}
cryptsetup luksClose ${TEMP_NAME}
#+end_src
** Fresh
:PROPERTIES:
:name: Chaise Conn
:email:    chaise.conn@freshconsulting.com
:header-args:    :noweb yes :mkdirp true
:ID: archlinux
:END:

Configs for my arch laptop

#+include: ./base.org

#+begin_src elisp :noweb-ref configs
(setq inbox-file "~/sync/inbox.org"
      org-directory "~/sync"
      scrot-directory "~/sync"
      org-agenda-files '("~/sync/areas/fresh.org")
      dotfiles-directory "~/dotfiles")
#+end_src

*** X
#+begin_src conf
# /usr/share/xsessions/exwm.desktop
[Desktop Entry]
Name=EXWM
Comment=Emacs Window Manager
Exec=exwm-start
Type=Application
#+end_src

#+begin_src sh :shebang "#!/bin/bash"
# this makes it work in Ubuntu
# /usr/loca/bin/exwm-start
xhost +
## you might need to append the TTY you are working on
xinit

wmname LG3D

# Set fallback cursor
xsetroot -cursor_name left_ptr

# If Emacs is started in server mode, `emacsclient` is a convenient way to edit
# files in place (used by e.g. `git commit`)
export VISUAL=emacsclient
export EDITOR="$VISUAL"

autorandr --change

# Finally launch emacs and enable exwm
exec emacs --eval '(cond ((file-exists-p "~/.exwm") (load-file "~/.exwm")) ((not (featurep (quote exwm))) (require (quote exwm)) (require (quote exwm-config)) (exwm-config-default) (message (concat "exwm configuration not found. " "Falling back to default configuration..."))))'
#+end_src
**** Monitors

#+begin_src elisp :noweb-ref exwm-configs
(setq exwm-randr-workspace-monitor-plist '(0 "eDP1" 1 "eDP1" 2 "HDMI2" 3 "HDMI2"))
#+end_src

*** Security
**** Lastpass

We use Lastpass at work to manage passwords

#+begin_src text :noweb-ref arch-packages
# Arch linux packages
lastpass-cli
#+end_src
*** Networking

On Arch Linux I use ~netctl~ to configure networking profiles

#+begin_src elisp :noweb-ref configs
(after! helm
  (defun interfaces () (interactive)
         (helm :sources
               (helm-build-async-source "*interfaces*"
                 :candidates-process
                 (lambda () (start-process "ip" nil "ip" "--brief" "link" "show" "up")))))



  (defun netctl-start()
    (interactive)
    (helm :sources (helm-build-sync-source "Networks"
                     :candidates (mapcar #'file-name-base (seq-filter (-not #'file-directory-p) (directory-files "/etc/netctl" t)))
                     :action (lambda (network) (sudo-run-async (concat "netctl start " network) "*netctl*"))
                     :fuzzy-match t)))
  (defun netctl-stop-all()
    (interactive)
    (sudo-run-async "netctl stop-all" "*netctl*")
    (message "Stopped all networks"))


  (map! :leader
        (:prefix ("N" . "Network")
         :n "n" #'netctl-start
         :n "S" #'netctl-stop-all
         :n "i" #'interfaces))

  )

#+end_src
**** Bluetooth
#+begin_src elisp :noweb-ref configs
(defun bluetooth ()
    (interactive)
    (helm :sources (helm-build-sync-source "Bluetooth Devices"
                     :candidates (mapcar 'car bluetooth-devices)
                     :action (lambda (device)
                               (process-file-shell-command
                                (concat "bluetoothctl connect " (cdr (assoc device bluetooth-devices))))))))

  (map! :leader
        (:prefix "N"
         :n "B" #'bluetooth))
#+end_src

#+STARTUP: overview

* Machines
:PROPERTIES:
:VISIBILITY: children
:END:
- Data files
  + Elfeed database
  + Emails
  + Org files (roam + inbox.org)
  + Syncthing shares
  + Project Repos


These are system specific settings for each of my machines

#+BEGIN: columnview :hlines 1 :id local :maxlevel 2 :skip-empty-rows t :format "%ID %CPU %Memory %Swap %OS"
| ID    | CPU                  | Memory | Swap     | OS   |
|-------+----------------------+--------+----------+------|
| alpha | Intel Core i7-4770k  | 16GB   | None     | Guix |
| gamma | Intel Core i7-1165G7 | 40GB   | Swapfile | Guix |
| usb   |                      |        |          |      |
| beta  |                      |        |          |      |
#+END:


** Alpha
:PROPERTIES:
:name: Chaise Conn
:email:    chaise.conn@protonmail.com
:header-args:    :noweb yes :mkdirp true
:ID: alpha
:CPU:      Intel Core i7-4770k
:Memory:   16GB
:OS:       Guix
:Swap:     None
:END:

My primary workstation

#+begin_src elisp :noweb-ref configs
(setq dotfiles-directory "~/dotfiles"
      org-directory "~/roam"
      org-roam-directory "~/roam"
      org-roam-database-connector 'sqlite-builtin
      org-agenda-files `(,(f-join org-roam-directory "areas"))
      download-directory "~/Downloads"
      scrot-directory download-directory
      magit-repository-directories `((,dotfiles-directory . 0))
      ccc/backup-destination "file:///mnt/backups/alpha/"
      ccc/wallpaper "~/Downloads/wallpapers/planet-21_1920x1080.jpg"
      ccc/lock-image "~/Downloads/wallpapers/filip-bazarewski-piunk.jpg"
      ccc/alpha 97
      doom-theme 'doom-outrun-electric
      ;; ccc/lock-args (append ccc/lock-args
      ;;                       '(("--date-color" "ff3030")
      ;;                         ("--time-color" "ff3030")
      ;;                         ("--timeoutline-color" "111111")
      ;;                         ("--timeoutline-width" "1")
      ;;                         ("--dateoutline-color" "111111")
      ;;                         ("--dateoutline-width" "1")))
      )
#+end_src

#+begin_src elisp :noweb-ref bookmarks
("inbox"
  (filename . "~/inbox.org"))
#+end_src

#+include: ./base.org
#+include: ./email.org
#+include: ./finance.org
#+include: ./rss.org
#+include: ./brain.org
#+include: ./vm.org
#+include: ./ai.org
#+include: ./social.org
#+include: ./backups.org
#+include: ./browser.org

*** X
**** Autorandr
#+begin_src :tangle config/autorandr/alpha/config
output VGA-1
crtc 0
mode 1920x1080
pos 1080x0
primary
rate 60.00
output DVI-D-2
crtc 2
mode 1920x1080
pos 0x1080
rate 60.00
rotate left
output DVI-D-1
crtc 1
mode 1920x1080
pos 1080x1080
rate 60.00
output HDMI-3
crtc 3
mode 1920x1080
pos 3000x1080
rate 60.00
rotate right
#+end_src

**** Monitors
#+begin_src elisp :noweb-ref exwm-configs
(setq exwm-randr-workspace-monitor-plist '(0 "VGA-1" 1 "DVI-D-2" 2 "DVI-D-1" 3 "HDMI-3"))
#+end_src
*** Disks

| Drive                                | Size  | Encrypted? | Filesystem | Purpose |
|--------------------------------------+-------+------------+------------+---------|
| [[id:4c8f7bbc-fcef-419e-b7c3-c7fa335ada0d][Seagate Barracuda ST2000DM001-1CH164]] | 2TB   | Yes        | ext4       | Data    |
| Samsung SSD 850 PRO                  | 256GB | No         | btrfs      | Root    |

**** Data
:PROPERTIES:
:ID:       4c8f7bbc-fcef-419e-b7c3-c7fa335ada0d
:END:

GNU Guix currently does not support decrypting LUKS devices with a keyfile at boot, so for now I have unlock and mount the drive manually after boot.

***** Preparation
Shred the disk

#+begin_src sh
sudo shred -n 1 -v --random-source /dev/random /dev/sda
#+end_src

Create the partition

#+begin_src sh :dir /sudo::/ :results output replace
#!/usr/bin/env bash
DEV=/dev/sda

parted --script ${DEV} mktable gpt
parted --script --align optimal ${DEV} mkpart Data 0% 100%
#+end_src

Create the encryption key

#+begin_src sh :dir /sudo::/ :results output replace
exec 2>&1
dd bs=512 count=4 if=/dev/random of=/mnt/machines/alpha/sda
#+end_src

Encrypt the partition

#+begin_src sh :dir /sudo::/
# --sectore-size: Increasing sector size from 512 bytes to 4096 bytes can provide better performance on most of the modern storage devices and also with some hw encryption accelerators
# --use-random : Block until entropy is available instead of using weak entropy (like /dev/urandom)
cryptsetup luksFormat --use-random --batch-mode --key-file /mnt/machines/alpha/sda /dev/sda1
#+end_src

Create the filesystem

#+begin_src sh :async :dir /sudo::/
exec 2>&1
TEMP_NAME=$(basename $(mktemp -q))

cryptsetup luksOpen --key-file /mnt/machines/alpha/sda /dev/sda1 ${TEMP_NAME}
mkfs.ext4 /dev/mapper/${TEMP_NAME}
cryptsetup luksClose ${TEMP_NAME}
#+end_src
** Gamma
:PROPERTIES:
:name: Chaise Conn
:email:    chaise.conn@protonmail.com
:header-args:    :noweb yes :mkdirp true
:ID: gamma
:CPU:      Intel Core i7-1165G7
:Memory:   40GB
:OS:       Guix
:Swap:     Swapfile
:Model:    System76 Lemur Pro
:END:

My primary laptop

- Model :: [[https://system76.com/laptops/lemur][System76 Lemur Pro]]
- Purchase Date :: [2021-01-20 Wed]

#+begin_src elisp :noweb-ref configs
(setq dotfiles-directory "~/dotfiles"
      org-directory "~/roam"
      org-roam-directory "~/roam"
      org-agenda-files `(,(f-join org-roam-directory "areas"))
      download-directory "~/Downloads"
      scrot-directory download-directory
      magit-repository-directories `((,dotfiles-directory . 0))
      org-roam-database-connector 'sqlite-builtin
      ccc/backup-destination "boto3+s3://jdaco-gamma-backup/gamma/"
      ccc/lock-image "~/Downloads/wallpapers/ji1fy6gu5fe2nu6hu1fu8ci1no7zu6gy9py5gi4vo3xu4pi7ke2hu5du3xi9re9z.jpg"
      ccc/wallpaper "~/Downloads/wallpapers/cy9ho2vi7su4hi3ga6ra7ja7na4ca1ja2nu9bo4vi5fe4ti2pa2zy8se1co9gi1d.jpg"
      )

(start-process-shell-command "xmodmap" nil "xmodmap ~/.Xmodmap")
#+end_src

#+include: ./base.org
#+include: ./email.org
#+include: ./finance.org
#+include: ./rss.org
#+include: ~/roam/config.org
#+include: ./vm.org
#+include: ./ai.org
#+include: ./social.org
#+include: ./backups.org
#+include: ./browser.org

#+begin_src elisp :noweb-ref bookmarks
("inbox"
  (filename . "~/Downloads/inbox.org"))
#+end_src

*** Monitors
#+begin_src elisp :noweb-ref exwm-configs
; (setq exwm-randr-workspace-monitor-plist '(0 "eDP-1" 1 "eDP-1" 2 "DP-2" 3 "DP-2"))
; Dynamically set monitor layout
(advice-add 'exwm-randr-refresh :before #'ccc/set-monitor-list)
#+end_src

*** Disks

| Drive                                | Size | Encrypted? | Filesystem | Purpose |
|--------------------------------------+------+------------+------------+---------|
| Samsung SSD 980                      | 500G | Yes        | btrfs      | Root    |

**** Swap

I use a swap file on the encrypted root partition

#+begin_src shell
SUBVOLUME=/swap
SWAPFILE=${SUBVOLUME}/swapfile

# Create a dedicated Btrfs subvolume for swap in order to exclude the swapfile from snapshots.
btrfs subvolume create ${SUBVOLUME}

chmod 700 ${SUBVOLUME}
touch ${SWAPFILE}
chmod 600 ${SWAPFILE}

# Make sure copy-on-write is disabled
chattr +C ${SWAPFILE}

# Make sure compression is disabled
btrfs property set ${SWAPFILE} compression none

fallocate -v -l 10G ${SWAPFILE}

mkswap ${SWAPFILE}
#+end_src
** USB
:PROPERTIES:
:name: Chaise Conn
:email:    chaise.conn@protonmail.com
:header-args:    :noweb yes :mkdirp true
:ID: usb
:decrypt:  no
:END:
This is a version of my configuration for use as a bootable medium.

#+begin_src elisp :noweb-ref configs
(setq dotfiles-directory "~/dotfiles"
      scrot-directory "~/Downloads"
      org-roam-directory "~/org")
#+end_src

#+begin_src elisp :noweb-ref bookmarks
("inbox"
  (filename . "~/inbox.org"))
#+end_src

#+include: ./base.org

*** Build

You can build a disk image of the OS using:

#+begin_src sh
guix system image dotfiles/machines/usb/config.scm
#+end_src

It will print the path to the image file when it's done
*** Installation

1. Burn the OS to the USB drive
   #+begin_src sh
dd if=/path/to/image of=/dev/sdx bs=256k status=progress
   #+end_src
2. Create home partition
   #+begin_src sh
parted --script --align optimal /dev/sdg mkpart primary 5850M 100%
mkfs.ext4 /dev/sdx3
   #+end_src
3. Install doom
   #+begin_src sh
git clone 'https://github.com/hlissner/doom-emacs' /mnt/guest/.emacs.d
HOME=/mnt/guest /mnt/guest/.emacs.d/bin/doom install --no-config --no-env
   #+end_src

4. Copy dotfiles into home partition
   #+begin_src sh
mount /dev/sdx3 /mnt
mkdir -p /mnt/guest
cd /mnt/guest
git clone https://github.com/Jdaco/dotfiles
   #+end_src

5. Expand dotfiles
#+begin_src sh
/mnt/guest/dotfiles/bin/config-tangle ~/dotfiles /mnt/guest usb
#+end_src


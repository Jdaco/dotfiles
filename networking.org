* Networking
#+begin_src elisp :noweb-ref configs
(defun ccc/eshell-ssh (host)
  (with-temp-buffer
    (find-file (read-file-name "Find file: " (format "/ssh:%s:/" host)))))

(defvar ip-address-regex (rx (? (1+ alnum) "@") (1+ digit) "." (1+ digit) "." (1+ digit) "." (1+ digit)))

(defun ccc/embark-find-ip-address ()
  "If the word at point is an IP address, returns (ip-address . WORD)"
  (save-excursion
    (let* ((beg (progn (skip-chars-backward "[:alnum:].@") (point)))
           (end (progn (skip-chars-forward "[:alnum:].@") (point)))
           (str (buffer-substring-no-properties beg end)))
        (when (string-match ip-address-regex str)
          `(ip-address . ,str)))))

(map! :map embark-ip-address-map
      "H" #'ccc/eshell-ssh)

(add-to-list 'embark-target-finders #'ccc/embark-find-ip-address)
(add-to-list 'embark-keymap-alist '(ip-address embark-ip-address-map))
#+end_src

** File Sharing
*** Syncthing

I use [[https://syncthing.net/][Syncthing]] to sync data between my different devices

**** Services
#+begin_src elisp :noweb-ref prodigy-services
(prodigy-define-service
    :name "Syncthing"
    :command "syncthing"
    :port "8384"
    :url "http://localhost:8384"
    :kill-process-buffer-on-stop t)
#+end_src
**** Bookmarks

#+begin_src elisp :noweb-ref bookmarks
("syncthing"
 (link . "http://localhost:8384")
 (handler . ccc/org-bookmark-handler))

; This bookmark shows me any file conflicts in my home directory
("conflicts"
  (location . "~")
  (pattern . "*conflict*")
  (handler . ccc/find-bookmark-handler))
#+end_src
*** rsync

#+begin_src elisp :noweb-ref configs
(defvar rsync-buffer-name "*rsync*")

(defun rsync--format-path (path)
  "Convert TRAMP paths to rsync format"
    (if (tramp-tramp-file-p path)
        (let ((tramp (tramp-dissect-file-name path)))
          (format "%s@%s:%s"
                  (tramp-file-name-user tramp)
                  (tramp-file-name-host tramp)
                  (file-local-name path)))
      path
      ))


(defun transient-rsync-read-directory (prompt _initial-input _history)
  "Read a directory."
  (rsync--format-path (expand-file-name (read-directory-name prompt)))
  )

(defun rsync-get-command (args)
  "Returns rsync command from arguments"
  (interactive)
  (let ((source (replace-regexp-in-string "/$" "" (transient-arg-value "--source=" args)))
        (dest (replace-regexp-in-string "/$" "" (transient-arg-value "--dest=" args)))
        (opts (remove-if (apply-partially #'string-match "dest\\|source") args)))
  (format "rsync %s %s %s" (s-join " " opts) source dest))
  )
(defun rsync-copy-command (&rest args)
  "Copy the rsync command to clipboard"
  (interactive (transient-args transient-current-command))
  (kill-new (rsync-get-command args)))

(defun rsync-copy (&rest args)
  "Use rsync to copy files"
  (interactive (transient-args transient-current-command))
  (let ((command (rsync-get-command args))
        (default-directory (expand-file-name "~")))
    (async-shell-command command rsync-buffer-name))
  )

(transient-define-prefix transient-rsync ()
  "Prefix that is minimal and uses an anonymous command suffix."
  :value '("--recursive" "--verbose" "--links" "--perms" "--times" "--human-readable")
  ["Arguments"
   ("-r" "Recursive" "--recursive")
   ("-v" "Verbose" "--verbose")
   ("-l" "Preserve symlinks" "--links")
   ("-p" "Preserve permission" "--perms")
   ("-t" "Preserve modification times" "--times")
   ("-n" "Dry run" "--dry-run")
   ("-z" "Compress" "--compress")
   ("-h" "Human readable" "--human-readable")
   ("-i" "Itemize changes" "--itemize-changes")
   ("s" "Source" "--source="
    :init-value (lambda (o) (oset o value (rsync--format-path (dired-dwim-target-directory))))
    :always-read t
    :reader transient-rsync-read-directory
    :prompt "Source: ")
   ("d" "Destination" "--dest="
    :always-read t
    :reader transient-rsync-read-directory
    :prompt "Destination: ")
   ]
  ["Actions"
   ("r" "Copy" rsync-copy)
   ("x" "Copy command" rsync-copy-command)
   ]
)

(set-popup-rule! (regexp-quote rsync-buffer-name) :side 'right :size 0.4 :select nil :quit 'current)

(map! :leader
      :n "a r" #'transient-rsync)
#+end_src

** nmap
#+begin_src elisp :noweb-ref configs
(defun eshell/nmap-ping (&rest args)
  (with-temp-buffer
    (eshell-command "nmap -sP 192.168.1.0/24" t)
    (buffer-string)))

(defun ccc/eshell-make-pipe (&rest commands)
  (format "bash -c \"%s\"" (s-join " | " commands))
  )

;; (set-eshell-alias!
;;  "network" (ccc/eshell-make-pipe "ip route list" "sed 1d" "awk '{print \\$1}'")
;;  "hosts" "network | xargs -n 1 nmap -sP | grep 'scan report' | awk '{print \$5}'"
 ;; )
#+end_src
** REST

#+begin_src elisp :noweb-ref packages
(package! restclient)
(package! ob-restclient)
#+end_src

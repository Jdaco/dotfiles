* Networking
#+begin_src elisp :noweb-ref configs
(require 'ipcalc)
(defun ccc/ssh (host)
    (let* ((user (read-string "Username: " nil nil "chaise"))
           (path (format "/ssh:%s@%s:~/" user host)))
      (find-file (read-file-name "Find file: " path)))
    )

(defvar ip-address-regex (rx (? (1+ alnum) "@") (1+ digit) "." (1+ digit) "." (1+ digit) "." (1+ digit)))

(defun ccc/embark-find-ip-address ()
  "If the word at point is an IP address, returns (ip-address . WORD)"
  (save-excursion
    (let* ((beg (progn (skip-chars-backward "[:alnum:].@") (point)))
           (end (progn (skip-chars-forward "[:alnum:].@") (point)))
           (str (buffer-substring-no-properties beg end)))
        (when (string-match ip-address-regex str)
          `(ip-address . ,str)))))

 (defvar embark-ip-address-map (make-sparse-keymap) "Embark keymap for ip addresses")
(map! :map embark-ip-address-map
      "H" #'ccc/ssh)

(add-to-list 'embark-target-finders #'ccc/embark-find-ip-address)
(add-to-list 'embark-keymap-alist '(ip-address embark-ip-address-map))
#+end_src

** File Sharing
*** Syncthing

I use [[https://syncthing.net/][Syncthing]] to sync data between my different devices

**** Services
#+begin_src elisp :noweb-ref prodigy-services
(prodigy-define-service
    :name "Syncthing"
    :command "syncthing"
    :port "8384"
    :url "http://localhost:8384"
    :kill-process-buffer-on-stop t)
#+end_src
**** Bookmarks

#+begin_src elisp :noweb-ref bookmarks
("syncthing"
 (link . "http://localhost:8384")
 (handler . ccc/org-bookmark-handler))

; This bookmark shows me any file conflicts in my home directory
("conflicts"
  (location . "~")
  (pattern . "*conflict*")
  (handler . ccc/find-bookmark-handler))
#+end_src
*** rsync

#+begin_src elisp :noweb-ref configs
(defvar rsync-buffer-name "*rsync*")

(defun rsync--format-path (path)
  "Convert TRAMP paths to rsync format"
    (if (tramp-tramp-file-p path)
        (let ((tramp (tramp-dissect-file-name path)))
          (format "%s@%s:%s"
                  (tramp-file-name-user tramp)
                  (tramp-file-name-host tramp)
                  (file-local-name path)))
      path
      ))


(defun transient-rsync-read-directory (prompt _initial-input _history)
  "Read a directory."
  (rsync--format-path (expand-file-name (read-directory-name prompt)))
  )

(defun rsync-get-command (args)
  "Returns rsync command from arguments"
  (interactive)
  (let ((source (replace-regexp-in-string "/$" "" (transient-arg-value "--source=" args)))
        (dest (replace-regexp-in-string "/$" "" (transient-arg-value "--dest=" args)))
        (opts (remove-if (apply-partially #'string-match "dest\\|source") args)))
  (format "rsync %s %s %s" (s-join " " opts) source dest))
  )
(defun rsync-copy-command (&rest args)
  "Copy the rsync command to clipboard"
  (interactive (transient-args transient-current-command))
  (kill-new (rsync-get-command args)))

(defun rsync-copy (&rest args)
  "Use rsync to copy files"
  (interactive (transient-args transient-current-command))
  (let ((command (rsync-get-command args))
        (default-directory (expand-file-name "~")))
    (async-shell-command command rsync-buffer-name))
  )

(transient-define-prefix transient-rsync ()
  "Prefix that is minimal and uses an anonymous command suffix."
  :value '("--recursive" "--verbose" "--links" "--perms" "--times" "--human-readable")
  ["Arguments"
   ("-r" "Recursive" "--recursive")
   ("-v" "Verbose" "--verbose")
   ("-l" "Preserve symlinks" "--links")
   ("-p" "Preserve permission" "--perms")
   ("-t" "Preserve modification times" "--times")
   ("-n" "Dry run" "--dry-run")
   ("-z" "Compress" "--compress")
   ("-h" "Human readable" "--human-readable")
   ("-i" "Itemize changes" "--itemize-changes")
   ("s" "Source" "--source="
    :init-value (lambda (o) (oset o value (rsync--format-path (dired-dwim-target-directory))))
    :always-read t
    :reader transient-rsync-read-directory
    :prompt "Source: ")
   ("d" "Destination" "--dest="
    :always-read t
    :reader transient-rsync-read-directory
    :prompt "Destination: ")
   ]
  ["Actions"
   ("r" "Run" rsync-copy)
   ("x" "Copy command" rsync-copy-command)
   ]
)

(set-popup-rule! (regexp-quote rsync-buffer-name) :side 'right :size 0.4 :select nil :quit 'current)

(map! :leader
      :n "a r" #'transient-rsync)
#+end_src
*** s5cmd

#+begin_src elisp :noweb-ref configs
(defvar s5cmd-buffer-name "*s5cmd*")

(defun s5cmd-get-command (command args)
  "Returns s5cmd command from arguments"
  (interactive)
  (let* ((source (transient-arg-value "--source=" args))
        (dest (transient-arg-value "--dest=" args))
        (numworkers (transient-arg-value "--numworkers=" args))
        (dry-run (if (transient-arg-value "--dry-run" args) "--dry-run" ""))
        (stat (if (transient-arg-value "--stat" args) "--stat" ""))
        (opts (remove-if (apply-partially #'string-match "dest\\|source\\|numworkers\\|dry-run\\|stat") args)))
    (format "s5cmd --numworkers=%s %s %s %s %s %s %s" numworkers dry-run stat command (s-join " " opts) source dest)))

(defun s5cmd-copy-command (&rest args)
  "Copy the s5cmd command to clipboard"
  (interactive (transient-args transient-current-command))
  (kill-new (message (s5cmd-get-command "cp" args))))

(defun s5cmd-copy (&rest args)
  "Use s5cmd to copy files"
  (interactive (transient-args transient-current-command))
  (let ((command (s5cmd-get-command "cp" args)))
    (async-shell-command command s5cmd-buffer-name))
  )

(defun s5cmd-sync (&rest args)
  "Use s5cmd to sync files"
  (interactive (transient-args transient-current-command))
  (let ((command (s5cmd-get-command "cp" args)))
    (async-shell-command command s5cmd-buffer-name))
  )

(transient-define-prefix transient-s5cmd ()
  "Transient for the s5cmd CLI tool"
  :value '("--numworkers=16" "--stat" "--dest=s3://jdaco-gamma-backup/")
  ["Arguments"
   ("-n" "Number of workers" "--numworkers=" :reader transient-read-number-N+)
   ("-N" "Dry run" "--dry-run")
   ("-s" "Stats" "--stat")
   ("s" "Source" "--source="
    :init-value (lambda (o) (oset o value (file-name-directory (or (buffer-file-name) (dired-dwim-target-directory)))))
    :always-read t
    :prompt "Source: ")
   ("d" "Destination" "--dest="
    :always-read t
    :prompt "Destination: ")
   ]
  ["Actions"
   ("y" "sync" s5cmd-sync)
   ("c" "Copy" s5cmd-copy)
   ("x" "Copy command" s5cmd-copy-command)
   ]
)

(set-popup-rule! (regexp-quote s5cmd-buffer-name) :side 'right :size 0.4 :select nil :quit 'current)

(map! :leader
      :n "a s s" #'transient-s5cmd)
#+end_src

** nmap

    #+begin_src elisp :noweb-ref packages
;; This package is required to manipulate ip addresses in elisp
(package! ipcalc)
#+end_src

#+begin_src elisp :noweb-ref configs
(defvar nmap-buffer-name "*Nmap*")

(defun nmap-ping--get-command (args)
  "Returns Nmap ping command from arguments"
  (interactive)
  (let* ((interface (transient-arg-value "--interface=" args))
         (info (network-info interface)))
    (format "nmap -sP %s/%s" (plist-get info :network) (plist-get info :cidr))))


(defun nmap-ping (&rest args)
  (interactive (transient-args transient-current-command))
  (let* ((command (nmap-ping--get-command args)))
    (async-shell-command command nmap-buffer-name)))

(defun network-info (interface)
  (let* ((info (network-interface-info interface))
         (ip (format-network-address (nth 0 info) t))
         (subnet (format-network-address (nth 2 info) t))
         (cidr (s-count-matches "1" (ipcalc-octets-as-binary (ipcalc-ip-to-octets subnet))))
         (network (ipcalc-binary-to-ip (ipcalc-network ip (int-to-string cidr)))))
    `(:ip ,ip :subnet ,subnet :cidr ,cidr :network ,network)))

(defun default-interface ()
  (car (car (network-interface-list)))
 )

(transient-define-prefix nmap ()
  "Nmap"
  :value '("--port=8080:80@loadbalancer" "--agents=2")
  ["Arguments"
        ("i" "Interface" "--interface="
         :init-value (lambda (o) (oset o value (default-interface))))
   ]
  ["Actions"
   ("p" "Ping" nmap-ping)
   ]
)

(set-popup-rule! (regexp-quote nmap-buffer-name) :side 'right :size 0.3 :select nil :ttl 0)

(map! :leader
      :desc "Nmap"       :n "a n" #'nmap)
#+end_src

** REST

#+begin_src elisp :noweb-ref packages
(package! restclient)
(package! ob-restclient)
#+end_src

#+TITLE: Terraform

#+begin_src elisp :noweb-ref configs
(defun terraform ()
    (interactive)
  "Run Terraform"
  (message "Not implemented"))

(map! :leader
      "a t" #'terraform)
#+end_src

* Snippets
:PROPERTIES:
:snippet_mode: terraform-mode
:END:

** data
#+BEGIN_SRC snippet :tangle (get-snippet-path)
# name: data
# key: data
# --
data "${1:type}" "${2:name}" {
  $0
}
#+END_SRC
** locals
#+BEGIN_SRC snippet :tangle (get-snippet-path)
# name: locals
# key: locals
# --
locals {
  {$1:name} = ${2:value}
}
#+END_SRC
** module
#+BEGIN_SRC snippet :tangle (get-snippet-path)
# name: module
# key: mod
# --
module "${1:name}" {
  source = "${2:location}"
  $0
}
#+END_SRC
** output
#+BEGIN_SRC snippet :tangle (get-snippet-path)
# name: output
# key: output
# --
output "${1:name}" {
  value = ${2:value}
  description = "$3"
}
#+END_SRC
** provider
#+BEGIN_SRC snippet :tangle (get-snippet-path)
# name: provider
# key: prov
# --
provider "${1:name}" {
  $0
}
#+END_SRC
** resource
#+BEGIN_SRC snippet :tangle (get-snippet-path)
# name: resource
# key: res
# --
resource "${1:type}" "${2:name}" {
         $0
}
#+END_SRC
** variable
#+BEGIN_SRC snippet :tangle (get-snippet-path)
# name: variable
# key: var
# --
variable "${1:name}" {
  type = ${2:string}
  description = "$3"
  ${4:default = "$5"}
  $0
}
#+END_SRC
** AWS
*** bucket
#+BEGIN_SRC snippet :tangle (get-snippet-path)
# name: bucket
# key: bucket
# --
module "${1:name}" {
  source = "terraform-aws-modules/s3-bucket/aws"
  version = "3.14.0"

  bucket = "$2"
  acl = "private"

  versioning = {
    enabled = ${3:true}
  }

  server_side_encryption_configuration {
    rule {
      apply_server_side_encryption_by_default {
        sse_algorithm = "AES256"
      }
    }
  }
}
#+END_SRC

*** policy
#+begin_src snippet :tangle (get-snippet-path)
data "aws_iam_policy_document" "$1" {
  statement {
    actions = ["$2"]

    resources = [$3]
  }
}
#+end_src
*** vpc
#+BEGIN_SRC snippet :tangle (get-snippet-path)
# name: VPC
# key: vpc
# --
module "${1:vpc}" {
  source = "terraform-aws-modules/vpc/aws"

  name = "${2}"
  cidr = "${3:10.0.0.0/16}"

  azs             = ["us-west-1a", "us-west-1b", "us-west-1c"]
  private_subnets = ["10.0.1.0/24", "10.0.2.0/24", "10.0.3.0/24"]
  public_subnets  = ["10.0.101.0/24", "10.0.102.0/24", "10.0.103.0/24"]

  enable_nat_gateway = true
}
#+END_SRC
*** role-irsa

#+BEGIN_SRC snippet :tangle (get-snippet-path)
# name: IAM Role (IRSA)
# key: role-irsa
# --
resource "aws_iam_role" "${1:name}" {
  name = "$1"
  path = "/"

  assume_role_policy = jsonencode(
    {
      "Version" : "2012-10-17",
      "Statement" : [
        {
          "Effect" : "Allow",
          "Principal" : {
            "Federated" : var.oidc_provider_arn
          },
          "Action" : "sts:AssumeRoleWithWebIdentity",
          "Condition" : {
            "StringEquals" : {
              "${replace(var.oidc_provider_arn, "/^(.*provider/)/", "")}:aud" : "sts.amazonaws.com"
              "${replace(var.oidc_provider_arn, "/^(.*provider/)/", "")}:sub" : "system:serviceaccount:${2:namespace}:${3:serviceaccount}"
            }
          }
        }
      ]
    }
  )

  inline_policy {
    name = "github_actions_webID_policy"
    policy = jsonencode(
      {
        Version = "2012-10-17"
        Statement = [
          {
            Action = []
            Effect = "Allow"
            Resource = []
          }
        ]
      }
    )
  }
}


#+END_SRC


* Aliases
#+begin_src sh :noweb-ref aliases
alias tf terraform $*
alias tfa terraform apply $*
alias tfA terraform apply -auto-approve $*
alias tfa! terraform init && terraform apply $*
alias tfA! terraform init && terraform apply -auto-approve $*
alias tfd terraform destroy $*
alias tfD terraform destroy -auto-approve $*
#+end_src
* Bookmarks
#+begin_src elisp :noweb-ref bookmarks
("Terraform (AWS)"
 (link . "https://registry.terraform.io/providers/hashicorp/aws/latest/docs")
 (handler . ccc/org-bookmark-handler))
#+end_src

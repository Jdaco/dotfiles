#+TITLE: Python

* Testing

- Pytest
* LSP
I use [[https://emacs-lsp.github.io/lsp-mode/page/lsp-pylsp/][pylsp]] as my language server

#+begin_src elisp :noweb-ref configs
(setq lsp-pylsp-plugins-jedi-completion-enabled t
      lsp-pylsp-plugins-jedi-definition-enabled t
      lsp-pylsp-plugins-jedi-hover-enabled t
      lsp-pylsp-plugins-jedi-references-enabled t
      lsp-pylsp-plugins-jedi-signature-help-enabled t
      lsp-pylsp-plugins-jedi-use-pyenv-environment t)
#+end_src

** System packages
- ~python-language-server~
- ~python-jedi~

* Linting
- pylint

#+begin_src elisp :noweb-ref configs
(setq lsp-pyls-plugins-pylint-enabled t
      lsp-pylsp-plugins-mypy-enabled t)
#+end_src

** System Packages
- ~python-pylint~
- ~python-mypy~
** Python packages
- ~pylsp-mypy~

* Formatting
#+begin_src elisp :noweb-ref configs
(setq lsp-pylsp-plugins-black-enabled t
      lsp-pylsp-plugins-isort-enabled t
      lsp-pylsp-plugins-yapf-enabled nil)

(add-hook! python-mode (setq-local +format-with-lsp nil))
#+end_src

** System Packages
- ~python-black~
- ~python-lsp-black~

* Refactoring

#+begin_src elisp :noweb-ref configs
(map! :map python-mode-map
      :leader
      "c I" #'python-add-import)
#+end_src

* Virutal Environments
* Snippets
:PROPERTIES:
:snippet_mode: python-mode
:header-args:  :tangle (get-snippet-path)
:END:

** with
#+BEGIN_SRC snippet
# name: with
# key: with
# uuid: with
# --
with ${1:expr}${2: as ${3:alias}}:
     $0
#+END_SRC

** method
#+begin_src snippet
# name: method
# --
def ${1:method_name}(self${2:, $3}):
    \"\"\"
    $4
    \"\"\"
    $0
#+end_src

** list
#+begin_src snippet
# name: list
# key: li
# uuid: li
# group: definitions
# --
[${1:x} for $1 in ${2:list}]
#+end_src

** init
#+begin_src snippet
# name: init
# key: init
# uuid: init
# --
def __init__(self${1:, args}):
    \"\"\"
    $2
    \"\"\"
    $0
#+end_src

** ifmain
#+begin_src snippet
# name: ifmain
# --
if __name__ == '__main__':
    ${1:`(or % "pass")`}
#+end_src

** def
#+begin_src snippet
# name: function
# key: def
# uuid: def
# --
def ${1:name}($2) -> ${3:None}:
    \"\"\"$4
    \"\"\"
    $0
#+end_src

** fixture
#+begin_src snippet
# name: fixture
# key: fixture
# uuid: fixture
# --
@pytest.fixture(scope="${1:function}")
def ${2:name}($3):
    $0
#+end_src

** test
#+begin_src snippet
# name: test
# key: test
# uuid: test
# --
def test_${1:name}($2):
    $0
#+end_src

** doc
#+begin_src snippet
# name: doc
# key: doc
# uuid: doc
# --
"""
$0
"""
#+end_src

** logger
#+begin_src snippet
# name: logger
# key: logger
# uuid: logger
# --
logger = logging.getLogger(${1:__name__})
#+end_src

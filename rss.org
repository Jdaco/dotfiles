* RSS

I use [[https://en.wikipedia.org/wiki/RSS][RSS]] to consume news and updates.

The [[https://github.com/skeeto/elfeed][Elfeed]] emacs package is my preferred feed reader

** Config
#+begin_src elisp :noweb-ref configs
(after! elfeed
  (require 'elfeed)
  (require 'elfeed-org)

  (setq elfeed-search-filter "@6-months-ago +unread"
    rmh-elfeed-org-files (list "~/roam/other/feeds.org")
    elfeed-db-directory "~/.elfeed"
    elfeed-search-title-min-width 32
    elfeed-sort-order "ascending")

  (defun elfeed-view-mpv (&optional prefix)
    "Youtube-feed link"
    (interactive "P")
    (let ((entries (elfeed-search-selected)))
      (cl-loop for entry in entries
               do (elfeed-untag entry 'unread)
               when (or (car (car (elfeed-entry-enclosures entry))) (elfeed-entry-link entry))
               do (run-mpv it prefix))
      (mapc #'elfeed-search-update-entry entries)
      (unless (use-region-p) (forward-line))))

  (defun elfeed-download-video ()
    (interactive)
    (elfeed-search-yank)
    (yt-dlp-download (car kill-ring) '()))

  (defun elfeed-save-db-and-bury ()
    "Wrapper to save the elfeed db to disk before burying buffer"
    (interactive)
    (elfeed-db-save)
    (quit-window))

  (defvar elfeed--update-timer nil
    "Timer returned by `run-at-time`")

  (defun ccc/elfeed-reload-db ()
    (interactive)
    (elfeed-db-load)
    (elfeed-search-update 1))

  (defun elfeed-delayed-update ()
    (when elfeed--update-timer (cancel-timer elfeed--update-timer))
    (setq elfeed--update-timer
          (run-at-time 10 nil
                       (lambda ()
                         (elfeed-db-save)
                         (setq elfeed--update-timer nil)))))

  (add-to-list 'elfeed-untag-hooks (lambda (entries tags) (elfeed-delayed-update)))
  (add-to-list 'elfeed-tag-hooks (lambda (entries tags) (elfeed-delayed-update)))

  (map! :after elfeed
        (:map elfeed-search-mode-map
         :n "B" #'elfeed-view-mpv
         :n "D" #'elfeed-download-video
         :n "q" #'elfeed-save-db-and-bury
         :n "C-l" #'elfeed-search-browse-url
         :n "R" #'ccc/elfeed-reload-db
         :n "X" #'elfeed-update
         :v "y" #'elfeed-search-yank
         )
        (:map elfeed-show-mode-map
         "C-l" #'elfeed-show-visit
         )
        )
)

(after! consult
  (add-to-list 'consult-bookmark-narrow
               `(?e "Elfeed" ,#'elfeed-search-bookmark-handler))
  )


(map! :leader
      "o x" #'elfeed)
#+end_src

Configure my common elfeed search as Emacs bookmarks

#+begin_src elisp :noweb-ref bookmarks
("elfeed-video"
  (location . "+unread +video")
  (tags "video" "unread")
  (handler . elfeed-search-bookmark-handler))
("elfeed-image"
  (location . "+unread +image")
  (tags "image" "unread")
  (handler . elfeed-search-bookmark-handler))
("elfeed-reddit"
  (location . "@2-years-ago--1-month-ago +unread +reddit")
  (tags "reddit" "unread")
  (handler . elfeed-search-bookmark-handler))
("elfeed-other"
  (location . "+unread -image -video -reddit")
  (tags "unread")
  (handler . elfeed-search-bookmark-handler))
("feeds"
  (filename . "~/roam/other/feeds.org"))
#+end_src
** Utils
#+begin_src sh :noweb-ref aliases
alias yt-feed bash -c "curl -s '$1' | grep -o -E 'https://www.youtube.com/feeds/videos.xml\?channel_id=[^\"]+' | head -n1"
#+end_src

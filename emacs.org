#+STARTUP: content

* Emacs

Emacs is my preferred environment for everything. I use it for as many things that I can

I do prefer the [[https://github.com/emacs-evil/evil][EVIL]] keybindings over the default Emacs ones

I use the [[https://github.com/hlissner/doom-emacs][Doom Emacs]] configuration framework. I agree with most of it's decisions out of the box, but I like that it stays out of your way so you can configure things your way

** Doom

Doom Emacs configuration is broken into 3 files:

1. =init.el=
   + This defines the doom modules that you want to enable
2. =config.el=
   + This is all of the other elisp to configure your emacs (variables, keybindings, etc)
3. =packages.el=
   + This is where you define the emacs packages that doom will install

When these files are changed, you need to do ~doom sync~ to pull down new packages and restart emacs for the changes to take effect

*** Installation
#+begin_src sh
# Download doom source code
COMMIT="0c9256411d6bdb6cfc920bcce2216d99ff28a0c5"

git clone https://github.com/hlissner/doom-emacs ~/.emacs.d
(cd ~/.emacs.d && git checkout $COMMIT)

# Initial install of doom
~/.emacs.d/bin/doom install
#+end_src
*** init.el
:PROPERTIES:
:ID:       2e3b632f-315d-4026-aea7-1fb176106422
:END:
#+begin_src elisp :tangle .config/doom/init.el
;;; init.el -*- lexical-binding: t; -*-

;; This file controls what Doom modules are enabled and what order they load
;; in. Remember to run 'doom sync' after modifying it!

;; NOTE Press 'SPC h d h' (or 'C-h d h' for non-vim users) to access Doom's
;;      documentation. There you'll find a "Module Index" link where you'll find
;;      a comprehensive list of Doom's modules and what flags they support.

;; NOTE Move your cursor over a module's name (or its flags) and press 'K' (or
;;      'C-c c k' for non-vim users) to view its documentation. This works on
;;      flags as well (those symbols that start with a plus).
;;
;;      Alternatively, press 'gd' (or 'C-c c d') on a module to browse its
;;      directory (for easy access to its source code).

(doom! :input
       ;;chinese
       ;;japanese
       ;;layout            ; auie,ctsrnm is the superior home row

       :completion
       company           ; the ultimate code completion backend
       ;; helm              ; the *other* search engine for love and life
       ;;ido               ; the other *other* search engine...
       ;; (ivy +icons)               ; a search engine for love and life
       (vertico +icons +childframe)           ; the search engine of the future


       :ui
       deft              ; notational velocity for Emacs
       doom              ; what makes DOOM look the way it does
       doom-dashboard    ; a nifty splash screen for Emacs
       doom-quit         ; DOOM quit-message prompts when you quit Emacs
       (emoji +unicode +github)  ; ðŸ™‚
       ;;fill-column       ; a `fill-column' indicator
       hl-todo           ; highlight TODO/FIXME/NOTE/DEPRECATED/HACK/REVIEW
       hydra
       indent-guides     ; highlighted indent columns
       (ligatures +extra)         ; ligatures and symbols to make your code pretty again
       ;;minimap           ; show a map of the code on the side
       modeline          ; snazzy, Atom-inspired modeline, plus API
       nav-flash         ; blink cursor line after big motions
       ;; neotree           ; a project drawer, like NERDTree for vim
       ophints           ; highlight the region an operation acts on
       (popup +defaults)   ; tame sudden yet inevitable temporary windows
       ;;tabs              ; a tab bar for Emacs
       treemacs          ; a project drawer, like neotree but cooler
       unicode           ; extended unicode support for various languages
       vc-gutter         ; vcs diff in the fringe
       vi-tilde-fringe   ; fringe tildes to mark beyond EOB
       ;;window-select     ; visually switch windows
       workspaces        ; tab emulation, persistence & separate workspaces
       zen               ; distraction-free coding or writing

       :editor
       (evil +everywhere); come to the dark side, we have cookies
       file-templates    ; auto-snippets for empty files
       fold              ; (nigh) universal code folding
       format  ; automated prettiness
       ;;god               ; run Emacs commands without modifier keys
       lispy             ; vim for lisp, for people who don't like vim
       ;;multiple-cursors  ; editing in many places at once
       ;;objed             ; text object editing for the innocent
       ;;parinfer          ; turn lisp into python, sort of
       ;;rotate-text       ; cycle region at point between text candidates
       ;; snippets          ; my elves. They type so I don't have to
       ;;word-wrap         ; soft wrapping with language-aware indent

       :emacs
       (dired +icons)             ; making dired pretty [functional]
       electric          ; smarter, keyword-based electric-indent
       (ibuffer +icons)         ; interactive buffer management
       undo              ; persistent, smarter undo for your inevitable mistakes
       vc                ; version-control and Emacs, sitting in a tree

       :term
       eshell            ; the elisp shell that works everywhere
       shell             ; simple shell REPL for Emacs
       term              ; basic terminal emulator for Emacs
       vterm             ; the best terminal emulation in Emacs

       :checkers
       syntax              ; tasing you for every semicolon you forget
       ;;spell             ; tasing you for misspelling mispelling
       ;;grammar           ; tasing grammar mistake every you make

       :tools
       biblio
       ansible
       debugger          ; stepping through code, to help you add bugs
       ;; direnv
       docker
       ;;editorconfig      ; let someone else argue about tabs vs spaces
       ;;ein               ; tame Jupyter notebooks with emacs
       (eval +overlay)     ; run code, run (also, repls)
       ;;gist              ; interacting with github gists
       (lookup +docsets +dictionary +offline)              ; navigate your code and its documentation
       lsp
       (magit +forge)             ; a git porcelain for Emacs
       make              ; run make tasks from Emacs
       pass              ; password manager for nerds
       pdf               ; pdf enhancements
       prodigy           ; FIXME managing external services & code builders
       ;;rgb               ; creating color strings
       ;;taskrunner        ; taskrunner for all your projects
       terraform         ; infrastructure as code
       ;;tmux              ; an API for interacting with tmux
       ;;upload            ; map local to remote projects via ssh/ftp

       :os
       ;;tty               ; improve the terminal Emacs experience

       :lang
       ;;agda              ; types of types of types of types...
       ;;cc                ; C/C++/Obj-C madness
       ;;clojure           ; java with a lisp
       ;;common-lisp       ; if you've seen one lisp, you've seen them all
       ;;coq               ; proofs-as-programs
       ;;crystal           ; ruby at the speed of c
       ;;csharp            ; unity, .NET, and mono shenanigans
       data              ; config/data formats
       ;;(dart +flutter)   ; paint ui and not much else
       ;;elixir            ; erlang done right
       ;;elm               ; care for a cup of TEA?
       emacs-lisp        ; drown in parentheses
       ;;erlang            ; an elegant language for a more civilized age
       ;;ess               ; emacs speaks statistics
       ;;faust             ; dsp, but you get to keep your soul
       ;;fsharp            ; ML stands for Microsoft's Language
       ;;fstar             ; (dependent) types and (monadic) effects and Z3
       ;;gdscript          ; the language you waited for
       (go +lsp)         ; the hipster dialect
       ;;(haskell +dante)  ; a language that's lazier than I am
       ;;hy                ; readability of scheme w/ speed of python
       ;;idris             ; a language you can depend on
       json              ; At least it ain't XML
       ;;(java +meghanada) ; the poster child for carpal tunnel syndrome
       (javascript +lsp)        ; all(hope(abandon(ye(who(enter(here))))))
       ;;julia             ; a better, faster MATLAB
       ;;kotlin            ; a better, slicker Java(Script)
       latex             ; writing papers in Emacs has never been so fun
       ;;lean
       ;;factor
       ledger            ; an accounting system in Emacs
       ;;lua               ; one-based indices? one-based indices
       markdown          ; writing docs for people to ignore
       ;;nim               ; python + lisp at the speed of c
       ;;nix               ; I hereby declare "nix geht mehr!"
       ;;ocaml             ; an objective camel
       (org +noter +pandoc +roam2 +gnuplot +hugo +pretty)               ; organize your plain life in plain text
       ;;php               ; perl's insecure younger brother
       plantuml          ; diagrams for confusing people more
       ;;purescript        ; javascript, but functional
       (python +lsp)            ; beautiful is better than ugly
       ;;qt                ; the 'cutest' gui framework ever
       ;;racket            ; a DSL for DSLs
       ;;raku              ; the artist formerly known as perl6
       rest              ; Emacs as a REST client
       ;;rst               ; ReST in peace
       ;;(ruby +rails)     ; 1.step {|i| p "Ruby is #{i.even? ? 'love' : 'life'}"}
       ;;rust              ; Fe2O3.unwrap().unwrap().unwrap().unwrap()
       ;;scala             ; java, but good
       (scheme +guile)            ; a fully conniving family of lisps
       sh                ; she sells {ba,z,fi}sh shells on the C xor
       ;;sml
       ;;solidity          ; do you need a blockchain? No.
       ;;swift             ; who asked for emoji variables?
       ;;terra             ; Earth and Moon in alignment for performance.
       ;;web               ; the tubes
       yaml              ; JSON, but readable

       :email
       (mu4e +gmail)
       ;;notmuch
       ;;(wanderlust +gmail)

       :app
       ;;calendar
       ;;irc               ; how neckbeards socialize
       (rss +org)        ; emacs as an RSS reader
       ;;twitter           ; twitter client https://twitter.com/vnought

       :config
       ;;literate
       (default +bindings +smartparens))
#+end_src
*** config.el
:PROPERTIES:
:ID:       197382ca-b112-444f-90a0-f38e5b3ad0f4
:END:

#+begin_src elisp :tangle .config/doom/config.el
;;; $DOOMDIR/config.el -*- lexical-binding: t; -*-

;; Place your private configuration here! Remember, you do not need to run 'doom
;; sync' after modifying this file!


;; Some functionality uses this to identify you, e.g. GPG configuration, email
;; clients, file templates and snippets.
(setq user-full-name "Chaise Conn"
      user-mail-address "chaisecanz@gmail.com")

;; Doom exposes five (optional) variables for controlling fonts in Doom. Here
;; are the three important ones:
;;
;; + `doom-font'
;; + `doom-variable-pitch-font'
;; + `doom-big-font' -- used for `doom-big-font-mode'; use this for
;;   presentations or streaming.
;;
;; They all accept either a font-spec, font string ("Input Mono-12"), or xlfd
;; font string. You generally only need these two:
(setq doom-font (font-spec :family "Victor Mono" :size 14 :weight 'semi-light))


   ;; dotspacemacs-default-font '("Victor Mono"
   ;;                             :size 14
   ;;                             :weight normal
   ;;                             :width normal
   ;;                             :powerline-scale 1.0)

;; (setq doom-font (font-spec :family "monospace" :size 12 :weight 'semi-light)

;; There are two ways to load a theme. Both assume the theme is installed and
;; available. You can either set `doom-theme' or manually load a theme with the
;; `load-theme' function. This is the default:
(setq doom-theme 'doom-horizon)


;; If you use `org' and don't want your org files in the default location below,
;; change `org-directory'. It must be set before org loads!
    ;; (setq org-directory "~/roam/")

;; This determines the style of line numbers in effect. If set to `nil', line
;; numbers are disabled. For relative line numbers, set this to `relative'.
(setq display-line-numbers-type 'visual)


;; Here are some additional functions/macros that could help you configure Doom:
;;
;; - `load!' for loading external *.el files relative to this one
;; - `use-package!' for configuring packages
;; - `after!' for running code after a package has loaded
;; - `add-load-path!' for adding directories to the `load-path', relative to
;;   this file. Emacs searches the `load-path' when you load packages with
;;   `require' or `use-package'.
;; - `map!' for binding new keys
;;
;; To get information about any of these functions/macros, move the cursor over
;; the highlighted symbol at press 'K' (non-evil users must press 'C-c c k').
;; This will open documentation for it, including demos of how they are used.
;;
;; You can also try 'gd' (or 'C-c c d') to jump to their definition and see how
;; they are implemented.

(setq doom-localleader-key ",")

;; Set an additional leader to use in EXWM buffers
(setq doom-leader-alt-key "s-SPC")

(undefine-key! doom-leader-map
  ; make-frame
  "o f"
  )

(require 'f)
(require 'bookmark)
(bookmark-maybe-load-default-file)
(global-auto-revert-mode)

(recentf-mode 0)

(map! :leader
      "SPC" #'execute-extended-command)

(map! :map eshell-mode-map
      :i "C-p" #'evil-paste-after)

(map! :map minibuffer-local-map
      "C-p" #'evil-paste-after)

(defun url-to-string (url)
  (with-current-buffer (url-retrieve-synchronously url)
    (set-buffer-multibyte t)
    (prog1 (buffer-substring (1+ url-http-end-of-headers)
                             (point-max))
      (kill-buffer))))

(map! :leader :n "a" nil)

(require 'transient)
(require 'embark)

<<configs>>
#+end_src



*** packages.el
:PROPERTIES:
:ID:       aed1d1c4-b001-4775-a391-b30a05095d2e
:END:
#+begin_src elisp :tangle .config/doom/packages.el
;; -*- no-byte-compile: t; -*-
;;; $DOOMDIR/packages.el

;; To install a package with Doom you must declare them here and run 'doom sync'
;; on the command line, then restart Emacs for the changes to take effect -- or
;; use 'M-x doom/reload'.


;; To install SOME-PACKAGE from MELPA, ELPA or emacsmirror:
;(package! some-package)

;; To install a package directly from a remote git repo, you must specify a
;; `:recipe'. You'll find documentation on what `:recipe' accepts here:
;; https://github.com/raxod502/straight.el#the-recipe-format
;(package! another-package
;  :recipe (:host github :repo "username/repo"))

;; If the package you are trying to install does not contain a PACKAGENAME.el
;; file, or is located in a subdirectory of the repo, you'll need to specify
;; `:files' in the `:recipe':
;(package! this-package
;  :recipe (:host github :repo "username/repo"
;           :files ("some-file.el" "src/lisp/*.el")))

;; If you'd like to disable a package included with Doom, you can do so here
;; with the `:disable' property:
;(package! builtin-package :disable t)

;; You can override the recipe of a built in package without having to specify
;; all the properties for `:recipe'. These will inherit the rest of its recipe
;; from Doom or MELPA/ELPA/Emacsmirror:
;(package! builtin-package :recipe (:nonrecursive t))
;(package! builtin-package-2 :recipe (:repo "myfork/package"))

;; Specify a `:branch' to install a package from a particular branch or tag.
;; This is required for some packages whose default branch isn't 'master' (which
;; our package manager can't deal with; see raxod502/straight.el#279)
;(package! builtin-package :recipe (:branch "develop"))

;; Use `:pin' to specify a particular commit to install.
;(package! builtin-package :pin "1a2b3c4d5e")


;; Doom's packages are pinned to a specific commit and updated from release to
;; release. The `unpin!' macro allows you to unpin single packages...
;(unpin! pinned-package)
;; ...or multiple packages
;(unpin! pinned-package another-pinned-package)
;; ...Or *all* packages (NOT RECOMMENDED; will likely break things)
;(unpin! t)

<<packages>>
#+end_src
*** Updating
#+begin_src elisp :noweb-ref configs
(map! :leader
      :desc "config-tangle" :n "h d t" (cmd! (compile (f-join dotfiles-directory "bin" "config-tangle")))
      :desc "Doom sync" :n "h d y" (cmd! (compile "~/.emacs.d/bin/doom sync"))
      :desc "Doom upgrade" :n "h d y" (cmd! (compile "~/.emacs.d/bin/doom upgrade"))
      )
#+end_src

** Completion

I use Vertico as my completion system

#+begin_src elisp :noweb-ref configs
(map! :map vertico-reverse-map
      :g "C-j" #'vertico-previous
      :g "C-k" #'vertico-next)

(defun ccc/vertico-cycle ()
  (interactive)
  (let* ((rev vertico-reverse-mode)
         (grid vertico-grid-mode))
    (if grid

      (vertico-multiform-vertical)
      (vertico-multiform-grid))
    ))

(map! :map vertico-map
      :nvieg "M-/" #'vertico-quick-jump
      :nvieg "C-h" #'vertico-grid-left
      :nvieg "C-l" #'vertico-grid-right
      :nvieg "C-l" #'vertico-grid-right
      :nvieg "C-c C-c" #'ccc/vertico-cycle
      :nvieg "C-c C-g" (cmd! (vertico-multiform--temporary-mode 'vertico-grid-mode (if vertico-grid-mode -1 1)))
      :nvieg "C-c C-r" (cmd! (vertico-multiform--temporary-mode 'vertico-reverse-mode (if vertico-reverse-mode -1 1)))
      "C-:" (cmd! () (delete-minibuffer-contents) (insert (ccc/consult-home)))
      )
;; Disable until I get this to work with vertico-posframe
;; (vertico-reverse-mode t)


;; Uncomment thiss if you want to use vertico-multiform
;; (setq vertico-multiform-categories '((t reverse))
;;       vertico-multiform-commands '((execute-extended-command grid reverse))
;; )
;; (vertico-multiform-mode t)

#+end_src

** Editing
#+begin_src elisp :noweb-ref configs
;; Evil
(require 'evil-collection)
(setq evil-escape-key-sequence ";a"
      evil-escape-unordered-key-sequence t)

;; Files
(map! :leader
      :nv "f S" #'evil-write-all)

(map! :nvm "M-a" #'evil-scroll-up
      :nvm "M-;" #'evil-scroll-down
      )
#+end_src

*** Snippets

I use the [[https://github.com/joaotavora/yasnippet][yasnippet]] emacs package for snippets

#+begin_src elisp :noweb-ref packages
(package! yasnippet)
#+end_src

#+begin_src elisp :noweb-ref configs
(require 'yasnippet)
(add-to-list 'yas-snippet-dirs "~/.config/doom/snippets")
(yas-global-mode)

(map! :i "M-a" #'yas-previous-field
      :i "M-;" #'yas-next-field
      :i "M-:" #'yas-expand)
#+end_src
*** Buffers

#+begin_src elisp :noweb-ref exwm-keys
([?\s-b] . switch-to-buffer)
#+end_src

#+begin_src elisp :noweb-ref configs
(defun ccc/ibuffer-set-filter-groups ()
(let ((filter-groups '(("Areas" (directory . "roam/areas"))
                       ("Notes" (directory . "roam/notes"))
                       ("Books" (directory . "roam/books"))
                       ("Special" (name . "\\*.+\\*")))))
  (setq ibuffer-filter-groups (append (ibuffer-projectile-generate-filter-groups) filter-groups)
        ibuffer-sorting-mode 'alphabetic)
  (when-let ((ibuf (get-buffer "*Ibuffer*")))
    (with-current-buffer ibuf
      (pop-to-buffer ibuf)
      (ibuffer-update nil t)))
  ))
(remove-hook 'ibuffer-hook 'ibuffer-projectile-set-filter-groups)
(add-hook 'ibuffer-hook 'ccc/ibuffer-set-filter-groups)
#+end_src

*** Diff
#+begin_src elisp :noweb-ref configs :results none
(defun ccc/ediff-current-file ()
  (interactive)
  (let ((current-file (current-buffer))
        (other-file (find-file-noselect (read-file-name "File to diff: "))))
    (ediff-buffers current-file other-file)))
#+end_src
*** Search

#+begin_src elisp :noweb-ref configs
(map! :n "/" #'isearch-forward
      :n "?" #'isearch-backward
      :n "n" #'isearch-repeat-forward
      :n "N" #'isearch-repeat-backward
      :n "C-/" #'+default/search-buffer
      :n "C-?" #'+vertico/search-symbol-at-point
      :n "M-/" #'avy-isearch
      :n "M-?" #'isearch-occur
      :n "C-'" #'iedit-mode
      )
#+end_src
** Bookmarks
[[https://www.gnu.org/software/emacs/manual/html_node/emacs/Bookmarks.html][Bookmarks]] let you save your position in commonly used files

#+begin_src elisp :noweb-ref configs
(setq bookmark-default-file "~/.emacs.d/.local/etc/bookmarks")

(defun ccc/bookmark-alacritty (bmk-record)
  "Open a command in alacritty"
  (interactive)
  (let* ((command (car (bookmark-prop-get bmk-record 'command)))
         (name (format "alacritty-%s" command)))
    (start-process-shell-command name nil (format "alacritty -e '%s'" command))))

(after! consult
  (add-to-list 'consult-bookmark-narrow
               `(?t "Terminal" ,#'ccc/bookmark-alacritty))
  )
#+end_src

#+begin_src elisp :tangle .emacs.d/.local/etc/bookmarks
;;;; Emacs Bookmark Format Version 1 ;;;; -*- coding: utf-8-emacs -*-
;;; This format is meant to be slightly human-readable;
;;; nevertheless, you probably don't want to edit it.
;;; -*- End Of Bookmark File Format Version Stamp -*-
(
("Downloads"
  (filename . "~/Downloads"))
<<bookmarks>>
)
#+end_src
** Help
*** Info


| Command             | Key | Description                      |
|---------------------+-----+----------------------------------|
| Info-top-node       | g t |                                  |
| info-next-reference | g j | Next link on the page            |
| info-forward-node   | C-j | Next node (down / forward level) |

#+begin_src elisp :noweb-ref configs
; Help
(map! :leader
      :prefix "h"
      "I" #'info-display-manual)
#+end_src

*** Man

Man pages are reference manuals for the programs on your system

#+begin_src elisp :noweb-ref configs
(map! :leader
      :prefix "h"
      "h" #'man)
#+end_src

** Services
I use [[https://github.com/rejeep/prodigy.el][Prodigy]] to manage user-level background processes

*** Prodigy
#+begin_src elisp :noweb-ref configs
(after! prodigy
  <<prodigy-services>>
  )

(map! :leader
      "o y" #'prodigy)

(map! :after prodigy
      :mode prodigy-view-mode
      "s" #'prodigy-start
      "S" #'prodigy-stop
      )

(add-hook! prodigy-mode
           (evil-snipe-local-mode 0))
#+end_src

** Shell

I use [[https://www.gnu.org/software/emacs/manual/html_mono/eshell.html][Eshell]] as my primary shell. For certain uses I use ~ansi-term~ instead. For some ncurses programs I'll use ~bash~ in the ~alacritty~ terminal emulator

*** Eshell
**** Aliases
:PROPERTIES:
:ID:       d14e235d-95ff-4976-bed9-4c0253a576e3
:END:

#+begin_src sh :tangle "~/.config/doom/eshell/profile"
export GUIX_PROFILE="~/.guix-profile"
export GUIX_PYTHONPATH="$GUIX_PROFILE/lib/python3.10/site-packages"
#+end_src

#+begin_src elisp :noweb-ref configs
(defun eshell/mktemp (&rest args)
  "Alias for mktemp that removes the trailing newline"
  (interactive)
  (string-trim (shell-command-to-string (string-join (cons "mktemp" args) " "))))
#+end_src

#+begin_src shell :tangle .config/doom/eshell/aliases
alias doom ~/.emacs.d/bin/doom $*
alias guixupdate sudo guix system reconfigure /etc/config.scm
alias ls exa --long --color=always --group-directories-first $*
alias lsr ls --tree $*
alias lsrd lsr --only-dirs $*
alias lsa ls -a $*

# Sudo
alias umount sudo umount $*
alias mount sudo mount $*

# Monitoring
alias pgrep pgrep --list-full $*
alias iostat iostat -hNs $*
alias pstree pstree -U $*
alias df df -h $*
alias clip xclip -selection clipboard -o $*

# Block Devices
alias lsblk lsblk -o 'name,size,type,mountpoint,partlabel,fstype,uuid' $*
alias mnt mount $1 ${mktemp -d}

<<aliases>>
#+end_src

#+begin_src elisp :noweb-ref configs
(map! :mode eshell-mode
      :i
      "C-l" (cmd! (eshell-z ".."))
      "C-f" #'eshell-z)
#+end_src

**** PATH
#+begin_src elisp :noweb-ref configs
(add-to-list 'exec-path (expand-file-name "~/.local/bin"))
(add-to-list 'exec-path (expand-file-name "~/dotfiles/bin"))
(add-to-list 'exec-path (expand-file-name "~/go/bin"))
(add-to-list 'exec-path (expand-file-name "/usr/bin"))
(setq eshell-path-env (s-join ":" exec-path))
#+end_src
**** Snippets
:PROPERTIES:
:snippet_mode: eshell-mode
:END:

#+begin_src snippet :tangle (get-snippet-path)
# name: For loop
# key: for
# --
for f in ${1:*} { ${2:echo} "$f"; $3} $0
#+end_src

*** Vterm

#+begin_src elisp :noweb-ref configs
(defun ccc/vterm-run-on-file (file command)
  (interactive "fFile: \nsCommand: ")
  (let ((final-command (format "%s '%s'" command file)))
    (ccc/vterm-run final-command)))

(defun ccc/vterm-run (command)
  (interactive "sCommand: ")
  (let* ((buffer (vterm t))
         (final-command (format "%s && exit" command)))
    (with-current-buffer buffer
      (vterm-send-string final-command)
      (vterm-send-return))
    ))

(map! :map embark-file-map
      "T" #'ccc/vterm-run-on-file)
#+end_src

** Filesystem
*** Navigation

I use ~consult-dir~ to quickly find files and add their patt to the current minibuffer selection

#+begin_src elisp :noweb-ref packages
(package! consult-dir)
#+end_src

#+begin_src elisp :noweb-ref configs
(require 'consult)
(setq consult-dir-shadow-filenames nil)

(defun ccc/find-bookmark-handler (record)
  (let ((search-dir (bookmark-prop-get record 'location))
        (search-pattern (bookmark-prop-get record 'pattern))
        (find-name-arg "-not \\( -wholename '*/.*' -prune \\) -name"))
    (find-name-dired search-dir search-pattern)))

(defun ccc/org-bookmark-handler (record)
  (let ((link (bookmark-prop-get record 'link)))
    (org-link-open-from-string link)))

(defun ccc/consult-home ()
    (let ((consult-find-args "find . -type d -not ( -wholename */.* -prune )")
          (default-directory "~"))
      (concat "~/" (consult--find "Dir: " (consult--find-make-builder nil) ""))))


(defun ccc/find-file-in (&optional arg)
  (interactive "P")
  (if arg
      (+vertico/find-file-in "~")
    (+vertico/find-file-in))
  )

(map! :leader
      "H" (cmd! () (find-file (ccc/consult-home)))
      "o I" (cmd! () (ccc/imv-dir (ccc/consult-home)))
      "f d"  #'consult-dir
      "f r"  #'consult-find
      "f F"  #'ccc/find-file-in
      )
#+end_src

**** Treemacs
[[https://github.com/Alexander-Miller/treemacs][Treemacs]] gives you a tree-style overview of your current project or directory

**** Projectile

[[https://github.com/bbatsov/projectile][Projectile]] is an emacs package that provides helpful commands for search, navigating, and executing commands within a project. Projectile recognizes a project as a directory containing a =.git= directory

#+begin_src elisp :noweb-ref configs
(defun projectile-find-readme () (interactive)
         (let ((fpaths (append
                        (file-expand-wildcards (projectile-expand-root "*.org"))
                        (file-expand-wildcards (projectile-expand-root "*.md")))))
           (if (and (not (seq-empty-p fpaths))
                    (file-exists-p (car fpaths)))
               (find-file (car fpaths))
             (message "README doesn't exist"))))

(setq projectile-project-root-files '()
      +workspaces-switch-project-function #'magit-status)

(after! projectile
  (add-to-list 'projectile-commander-methods `(?E "Eshell" ,#'projectile-run-eshell)))

(map! :leader
      (:prefix "p"
      "C" #'projectile-configure-project
      "r" #'projectile-run-project
      "/" #'projectile-find-readme
      "'" #'project-eshell)
      )


#+end_src
**** Dired

#+begin_src elisp :noweb-ref configs
(map! :leader
      "f -" #'dired-jump)

(map! :map dired-mode-map
      :nvm
      "g h" (cmd! () (find-file "~"))
      "C-k" #'dired-kill-line
      "C-S-k" #'dired-do-kill-lines
      "Z" #'dired-do-compress
      "c" #'dired-do-compress-to
      "<tab>" #'dired-subtree-toggle
      "<backtab>" #'dired-subtree-cycle
      :localleader
      "t"  (cmd! () (dired-toggle-marks) (image-dired-display-thumbs) (dired-unmark-all-marks))
      )

(evil-collection-define-key 'normal 'dired-mode-map
      "h" #'dired-up-directory
      "we" (cmd! () (consult-file-externally (car (dired-get-marked-files))))
      "l" #'dired-open-file)

(add-hook! 'dired-mode-hook #'dired-hide-details-mode)
(add-hook! 'dired-subtree-after-insert-hook #'nerd-icons-dired--refresh)
(add-hook! 'dired-subtree-after-remove-hook #'nerd-icons-dired--refresh)

(setq dired-listing-switches "-algho --group-directories-first"

      dired-open-extensions '(("mp4" . "mpv")
                              ("webm" . "mpv")
                              ("mkv" . "mpv")
                              ("mov" . "mpv")
                              ("m4v" . "mpv")
                              ("gif" . "imv")
                              ("webp" . "imv")
                              ("mp3" . "mpv")
                              )
      dired-omit-files (rx (seq bol "." (* any) eol))
      )

(defun ccc/randomize-file-name (filename)
  (format "%s%s.%s" (file-name-directory filename) (password-generator-phonetic 64 t) (file-name-extension filename)))

(defun ccc/dired-randomize-marked ()
  "Rename all marked dired files to random names"
  (interactive)
  (let ((files (dired-get-marked-files)))
    (dolist (file files)
      (dired-rename-file file (ccc/randomize-file-name file) nil))))
#+end_src

#+begin_src elisp :noweb-ref packages
(package! dired-open)
(package! dired-subtree)
#+end_src

*** Trash
#+begin_src elisp :noweb-ref configs
(setq delete-by-moving-to-trash t
      trash-directory "~/.trash"
)

(defun ccc/empty-trash ()
  "Remove trash directory"
  (interactive)
  (let ((delete-by-moving-to-trash nil)) (delete-directory trash-directory t)))
#+end_src

*** Archives
You can use ~dired~ to manage archives

| Dired Key | Command           | Description                            |
|-----------+-------------------+----------------------------------------|
| ; Z       | dired-do-compress | Compress or Uncompress an archive file |
** History
I don't having a log of the commands I run

#+begin_src elisp :noweb-ref configs
(setq history-length 0)
#+end_src
** Lisp
#+begin_src elisp :noweb-ref configs
; Replace eval-last-sexp with pretty printing versiion
(global-set-key [remap eval-last-sexp] 'pp-eval-last-sexp)
#+end_src


#+begin_src elisp :noweb-ref packages
(package! geiser)
(package! geiser-guile)
#+end_src
** Theme

Set =ansi-colors= to match =term-colors= (=ansi-colors= are used by Eshell and other command buffers)

#+begin_src elisp :noweb-ref configs
(custom-set-faces
 '(ansi-color-black ((t (:inherit term-color-black))))
 '(ansi-color-red ((t (:inherit term-color-red))))
 '(ansi-color-green ((t (:inherit term-color-green))))
 '(ansi-color-yellow ((t (:inherit term-color-yellow))))
 '(ansi-color-blue ((t (:inherit term-color-blue))))
 '(ansi-color-magenta ((t (:inherit term-color-magenta))))
 '(ansi-color-cyan ((t (:inherit term-color-cyan))))
 '(ansi-color-gray ((t (:inherit term-color-gray)))))

(custom-set-faces
 '(ansi-color-bright-black ((t (:inherit term-colo-bright-black))))
 '(ansi-color-bright-red ((t (:inherit term-colo-bright-red))))
 '(ansi-color-bright-green ((t (:inherit term-colo-bright-green))))
 '(ansi-color-bright-yellow ((t (:inherit term-colo-bright-yellow))))
 '(ansi-color-bright-blue ((t (:inherit term-colo-bright-blue))))
 '(ansi-color-bright-magenta ((t (:inherit term-colo-bright-magenta))))
 '(ansi-color-bright-cyan ((t (:inherit term-colo-bright-cyan)))))
#+end_src
** PDF
#+begin_src elisp :noweb-ref configs
(map! :map pdf-view-mode-map
      :nvm "M-;" #'pdf-view-scroll-up-or-next-page
      :nvm "M-a" #'pdf-view-scroll-down-or-previous-page
      )
#+end_src
** Embark
#+begin_src elisp :noweb-ref packages
(package! embark)
#+end_src

** Transient
#+begin_src elisp :noweb-ref packages
; Pins needed to fix bug in latest
; https://github.com/doomemacs/doomemacs/issues/7078
(package! transient :pin "c2bdf7e12c530eb85476d3aef317eb2941ab9440")
(package! with-editor :pin "391e76a256aeec6b9e4cbd733088f30c677d965b")

(package! transient-posframe)
#+end_src

#+begin_src elisp :noweb-ref configs
(after! transient
    (require 'transient-posframe)
    (transient-posframe-mode 1)
    (setq transient-posframe-min-height 1)
  )
#+end_src
** Search
#+begin_src elisp :noweb-ref configs
(setq +lookup-provider-url-alist
  '(("Doom Emacs issues" "https://github.com/hlissner/doom-emacs/issues?q=is%%3Aissue+%s")
    ("Google"            +lookup--online-backend-google "https://google.com/search?q=%s")
    ("Google images"     "https://www.google.com/images?q=%s")
    ("Google maps"       "https://maps.google.com/maps?q=%s")
    ("Project Gutenberg" "http://www.gutenberg.org/ebooks/search/?query=%s")
    ("DuckDuckGo"        +lookup--online-backend-duckduckgo "https://duckduckgo.com/?q=%s")
    ("DevDocs.io"        "https://devdocs.io/#q=%s")
    ("StackOverflow"     "https://stackoverflow.com/search?q=%s")
    ("Github"            "https://github.com/search?ref=simplesearch&q=%s")
    ("Youtube"           "https://youtube.com/results?aq=f&oq=&search_query=%s")
    ("Wolfram alpha"     "https://wolframalpha.com/input/?i=%s")
    ("Wikipedia"         "https://wikipedia.org/search-redirect.php?language=en&go=Go&search=%s")
    ("MDN"               "https://developer.mozilla.org/en-US/search?q=%s")
    ("Kubernetes"        "https://kubernetes.io/search/?q=%s")
    )
)
#+end_src

** TRAMP

#+begin_src elisp :noweb-ref configs
(add-hook! 'tramp--startup-hook (add-to-list 'tramp-remote-path 'tramp-own-remote-path))
#+end_src

*** ibuffer-tramp

[[https://github.com/svend/ibuffer-tramp/blob/bcad0bda3a67f55d1be936bf8fa9ef735fe1e3f3/ibuffer-tramp.el][ibuffer-tramp]] groups buffers by TRAMP connection in your ibuffer list

The source was short enought that I copied it below

#+begin_src elisp :noweb-ref configs

;;; ibuffer-tramp.el --- Group ibuffer's list by TRAMP connection
;;
;; Copyright (C) 2011 Svend Sorensen
;;
;; Author: Svend Sorensen <svend@ciffer.net>
;; Keywords: convenience
;; X-URL: http://github.com/svend/ibuffer-tramp
;; URL: http://github.com/svend/ibuffer-tramp
;; Version: DEV
;
;; This program is free software; you can redistribute it and/or modify
;; it under the terms of the GNU General Public License as published by
;; the Free Software Foundation, either version 3 of the License, or
;; (at your option) any later version.
;;
;; This program is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;; GNU General Public License for more details.
;;
;; You should have received a copy of the GNU General Public License
;; along with this program.  If not, see <http://www.gnu.org/licenses/>.
;;
;;; Commentary:
;;
;; This code is heavily based on Steve Purcell's ibuffer-vc
;; (http://github.com/purcell/ibuffer-vc).
;;
;; Adds functionality to ibuffer for grouping buffers by their TRAMP
;; connection.
;;
;;; Use:
;;
;; To group buffers by TRAMP connection:
;;
;;   M-x ibuffer-tramp-set-filter-groups-by-tramp-connection
;;
;; or, make this the default:
;;
;;   (add-hook 'ibuffer-hook
;;     (lambda ()
;;       (ibuffer-tramp-set-filter-groups-by-tramp-connection)
;;       (ibuffer-do-sort-by-alphabetic)))
;;
;; Alternatively, use `ibuffer-tramp-generate-filter-groups-by-tramp-connection'
;; to programmatically obtain a list of filter groups that you can
;; combine with your own custom groups.
;;
;;; Code:

;; requires

(require 'ibuffer)
(require 'ibuf-ext)
(require 'tramp)
(eval-when-compile
  (require 'cl))

(defun ibuffer-tramp-connection (buf)
  "Return a cons cell (method . host), or nil if the file is not
using a TRAMP connection"
  (let ((file-name (with-current-buffer buf (or buffer-file-name default-directory))))
    (when (tramp-tramp-file-p file-name)
      (let ((method (tramp-file-name-method (tramp-dissect-file-name file-name)))
	    (host (tramp-file-name-host (tramp-dissect-file-name file-name))))
	(cons method host)))))

;;;###autoload
(defun ibuffer-tramp-generate-filter-groups-by-tramp-connection ()
  "Create a set of ibuffer filter groups based on the TRAMP connection of buffers"
  (let ((roots (ibuffer-remove-duplicates
                (delq nil (mapcar 'ibuffer-tramp-connection (buffer-list))))))
    (mapcar (lambda (tramp-connection)
              (cons (format "%s:%s" (car tramp-connection) (cdr tramp-connection))
                    `((tramp-connection . ,tramp-connection))))
            roots)))

(define-ibuffer-filter tramp-connection
    "Toggle current view to buffers with TRAMP connection QUALIFIER."
  (:description "TRAMP connection"
                :reader (read-from-minibuffer "Filter by TRAMP connection (regexp): "))
  (ibuffer-awhen (ibuffer-tramp-connection buf)
    (equal qualifier it)))

;;;###autoload
(defun ibuffer-tramp-set-filter-groups-by-tramp-connection ()
  "Set the current filter groups to filter by TRAMP connection."
  (interactive)
  (setq ibuffer-filter-groups (ibuffer-tramp-generate-filter-groups-by-tramp-connection))
  (ibuffer-update nil t))

(provide 'ibuffer-tramp)
#+end_src

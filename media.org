* Media
** Video
*** mpv

- [[https://wiki.archlinux.org/index.php/Mpv][MPV]] is my preferred video player. I use it in as many scenarios as I can
- I use [[https://github.com/yt-dlp/yt-dlp][yt-dlp]] to download videos from various sites
  + This is better than [[https://github.com/ytdl-org/youtube-dl][youtube-dl]] because it downloads faster and plays age-restricted youtube videos

#+begin_src conf :tangle .config/mpv/mpv.conf
demuxer-readahead-secs=300
ytdl-format=bestvideo[height<=?720]+bestaudio/best
script-opts=ytdl_hook-ytdl_path=yt-dlp
screenshot-directory=~/Downloads
force-window=true
#+end_src

#+begin_src conf :tangle .config/mpv/input.conf
Ctrl+o script_message locate-current-file
Ctrl+l seek  5
Ctrl+h seek -5
Ctrl+j seek  60
Ctrl+k seek -60
#+end_src

**** Scripts

- [[https://github.com/torque/mpv-progressbar][progressbar]] :: [[file:stow/.config/mpv/scripts/progressbar.lua][.config/mpv/scripts/progressbar.lua]]
- [[https://github.com/jgreco/mpv-youtube-quality][youtube-quality]] :: [[file:stow/.config/mpv/scripts/youtube-quality.lua][.config/mpv/scripts/youtube-quality.lua]]
- [[https://github.com/nimatrueway/mpv-locatefile-lua-script][locatefile]] :: [[file:stow/.config/mpv/scripts/locatefile.lua][.config/mpv/scripts/locatefile.lua]]
**** Org
Open org-mode link in MPV

#+begin_src elisp :noweb-ref configs
(defun run-mpv (url &optional raw)
  "Watch a video from URL in MPV"
  (let ((command "mpv --force-window \"%s\""))
    (start-process-shell-command "mpv" "mpv" (format command url)))

  )

; Open youtube videos in mpv by default
(setq browse-url-handlers
      '(("https:\\/\\/www\\.youtu\\.*be." . run-mpv)
        ("." . browse-url-firefox)))

(defun org-open-at-point-in-mpv ()
  (interactive)
  (let ((browse-url-browser-function (lambda (url &optional new_window) (run-mpv url))))
        (org-open-at-point)))

(map! :map org-mode-map
      "C-c RET" #'org-open-at-point-in-mpv
      )
#+end_src

*** Webcam

Use ~mpv~ to view your webcam

#+begin_src elisp :noweb-ref configs
(defun webcam ()
  (interactive)
  (run-mpv "/dev/video0" t))

(map! :leader
      (:prefix ("M" . "Media")
      "v" #'webcam))
#+end_src
*** yt-dlp

#+begin_src conf :tangle .config/yt-dlp/config
--format bestvideo[height<=?720]+bestaudio/best
--concurrent-fragments 8
--write-url-link
--paths ~/Downloads
#+end_src

#+begin_src elisp :noweb-ref configs
(defvar yt-dlp-buffer-name "*yt-dlp*")

(set-popup-rule! (regexp-quote yt-dlp-buffer-name) :side 'bottom :size 0.3 :select nil :quit 'current)

(defun yt-dlp-get-command (args)
  "Returns yt-dlp command from arguments"
  (interactive)
  (format "yt-dlp %s" (s-join " " args))
  )

(defun yt-dlp-download (url args)
  (interactive (list (read-string "URL: ") (transient-args transient-current-command)))
  (async-shell-command (yt-dlp-get-command (append args (list url))) yt-dlp-buffer-name)
  )

(defun yt-dlp-download-batch (file args)
  (interactive (list (read-file-name "URL File: ") (transient-args transient-current-command)))
  (async-shell-command (yt-dlp-get-command (cons (concat "--batch-file=" file) args)) yt-dlp-buffer-name)
  )

(defun yt-dlp-download-clip (&rest args)
  (interactive (transient-args transient-current-command))
  (let* ((urls (s-replace " " "\n" (x-get-clipboard)))
         (hash (secure-hash 'sha1 urls))
         (fname (concat "/tmp/url-" hash)))
    (f-write urls 'utf-8 fname)
    (yt-dlp-download-batch fname args))
  )

(transient-define-prefix transient-yt-dlp ()
  "yt-dlp transient"
  :value '("--write-url-link" "--paths=~/Downloads")
  ["Arguments"
   ("-p" "Download Path" "--paths=" :always-read t :reader transient-read-existing-directory)
   ("-w" "Write URL Link" "--write-url-link")
   ]
  ["Actions"
   ("y" "Single" yt-dlp-download)
   ("b" "Batch" yt-dlp-download-batch)
   ("c" "Clipboard" yt-dlp-download-clip)
   ]
)

(map! :leader
      :desc "yt-dlp"  :n "a s y" #'transient-yt-dlp
      )
#+end_src

** Images

#+begin_src elisp
(add-to-list 'default-frame-alist '("^\\*image-dired\\*$" :vslot -1 :slot 2 :select t :height 0.9))
(add-to-list 'default-frame-alist '("^\\*image-dired-display-image\\*$" :vslot -1 :slot 2 :select t :height 0.9 :width 0.9))
#+end_src


#+begin_src elisp :noweb-ref configs :results none
; Image keybinds
(map! :map image-mode-map
      "C-k" #'image-previous-file
      "C-j" #'image-next-file
      )
(setq image-dired-thumb-size 250
      image-dired-thumb-width 250
      image-dired-thumb-height 250
      image-use-external-converter t
      image-dired-marking-shows-next nil)

(map! :map 'image-dired-thumbnail-mode-map
      "C-l" (cmd! () (consult-file-externally (image-dired-original-file-name)))
      )


(defun ccc/convert (extension)
  "Convert WEBP images to another format"
  (interactive (list (completing-read "Extension: " '(png jpg))))
  (let* ((filename (dired-get-filename)))
    (shell-command (format "dwebp %s -o %s" filename (f-swap-ext filename extension)) nil)
    (revert-buffer)
    ))

(map! :map dired-mode-map
      :n "#" #'ccc/convert)

;; Sometimes dired thumbnails gets stuck if you delete the last file it had open
(defun ccc/reset-image-dired ()
  (interactive)
  (setq image-dired-queue nil image-dired-queue-active-jobs 0))

(defun ccc/imv-dir (dir)
  (interactive)
  (let* ((images (split-string
                    (shell-command-to-string (format "find %s -type f | shuf | head -n 10000" dir)) "\n" t)))
    (apply #'start-process "imv" "imv" "imv" images)))
#+end_src

*** IMV

Config:

#+begin_src conf :tangle .config/imv/config
[binds]
<Ctrl+Shift+K> = exec rm -v "$imv_current_file"; close
r = rotate by 90
#+end_src

*** gallery-dl

#+begin_src json  :tangle ~/.config/gallery-dl/config.json
{
    "downloader": {
        "ytdl": {
            "module": "yt_dlp"
        }
    }
}
#+end_src

#+begin_src sh :noweb-ref aliases
alias gdl gallery-dl -o browser=firefox $*
#+end_src

#+begin_src elisp :noweb-ref configs
(defvar gallery-dl-buffer-name "*gallery-dl*")

(set-popup-rule! (regexp-quote gallery-dl-buffer-name) :side 'bottom :size 0.3 :select nil :quit 'current)

(defun gallery-dl--read-max-date (prompt initial history)
  (format "'date >= datetime(%s)'" (replace-regexp-in-string "-0?" ", " (transient-read-date prompt initial history))))

(defun gallery-dl--read-min-date (prompt initial history)
  (format "'date <= datetime(%s)'" (replace-regexp-in-string "-0?" ", " (transient-read-date prompt initial history))))

(defun gallery-dl-get-command (args)
  "Returns gallery-dl command from arguments"
  (format "gallery-dl -o browser=firefox %s" (s-join " " args))
  )

(defun gallery-dl-copy-command (&rest args)
  (interactive (transient-args transient-current-command))
  (let ((command (gallery-dl-get-command args)))
    (print command)
    (kill-new command)))

(defun gallery-dl-download (url args)
  (interactive (list (read-string "URL: ") (transient-args transient-current-command)))
  (async-shell-command (gallery-dl-get-command (append args (list url))) gallery-dl-buffer-name)
  )

(defun gallery-dl-download-batch (file args)
  (interactive (list (read-file-name "URL File: ") (transient-args transient-current-command)))
  (print (gallery-dl-get-command (cons (concat "--input-file=" (expand-file-name file)) args)))
  ;(async-shell-command (gallery-dl-get-command (cons (concat "--input-file=" (expand-file-name file)) args)) gallery-dl-buffer-name)
  )

(defun gallery-dl-download-clip (&rest args)
  (interactive (transient-args transient-current-command))
  (let* ((urls (s-replace " " "\n" (x-get-clipboard)))
         (hash (secure-hash 'sha1 urls))
         (fname (concat "/tmp/gdl-" hash)))
    (f-write urls 'utf-8 fname)
    (gallery-dl-download-batch fname args))
  )

(transient-define-prefix transient-gallery-dl ()
  "gallery-dl transient"
  :value '("--directory=~/Downloads/gallery-dl")
  ["Arguments"
   ("-v" "Verbose" "--verbose")
   ("-n" "Dry Run" "--no-download")
   ("-m" "Min Date" "--filter=" :reader gallery-dl--read-min-date)
   ("-M" "Max Date" "--filter=" :reader gallery-dl--read-max-date)
   ("-f" "Filter" "--filter=" :prompt "Filter: ")
   ("-r" "Range" "--range=" :prompt "Range: ")
   ("-d" "Destination" "--destination=" :reader transient-read-directory)
   ("-D" "Directory" "--directory=" :reader transient-read-directory)
   ]
  ["Actions"
   ("g" "Single" gallery-dl-download)
   ("b" "Batch" gallery-dl-download-batch)
   ("c" "Clipboard" gallery-dl-download-clip)
   ("x" "Copy command" gallery-dl-copy-command)
   ]
)

(map! :leader
      :desc "gallery-dl"  :n "a s g" #'transient-gallery-dl
      )
#+end_src

#+RESULTS:
: transient-gallery-dl

** Audio
*** Pulsemixer
#+begin_src elisp :noweb-ref configs
(add-hook! 'eshell-mode-hook (add-to-list 'eshell-visual-commands "pulsemixer"))

(map! "<XF86AudioMute>" #'pulseaudio-control-toggle-current-sink-mute
      "<XF86AudioRaiseVolume>" #'pulseaudio-control-increase-volume
      "<XF86AudioLowerVolume>" #'pulseaudio-control-decrease-volume)
#+end_src

#+begin_src elisp :noweb-ref packages
(package! pulseaudio-control)
#+end_src
** Speech to Text

I use [[https://github.com/ideasman42/nerd-dictation][nerd-dictation]]
